/** Diverging colormaps from colorbrewer2.org 
  I believe they are uncopyrighted as trivial wrapper around public domain  data */


void brown_blue_green (double cmap[NCMAP][3])
{
/* generated by ../rgb2func.pl */
  static double basemap[][3] = {
	{0.54902, 0.31765,0.03922},
	{0.74902, 0.50588,0.17647},
	{0.87451, 0.76078,0.49020},
	{0.96471, 0.90980,0.76471},
	{0.96078, 0.96078,0.96078},
	{0.78039, 0.91765,0.89804},
	{0.50196, 0.80392,0.75686},
	{0.20784, 0.59216,0.56078},
	{0.00392, 0.40000,0.36863}};

 for (int i = 0; i < NCMAP; i++) {
    double x = i*(8 - 1e-10)/(NCMAP - 1);
    int j = x; x -= j;
    for (int k = 0; k < 3; k++)
      cmap[i][k] = (1. - x)*basemap[j][k] + x*basemap[j+1][k];
  }
}

void pink_red_green (double cmap[NCMAP][3])
{
/* generated by ../rgb2func.pl */
  static double basemap[][3] = {
	{0.46275, 0.16471,0.51373},
	{0.60000, 0.43922,0.67059},
	{0.76078, 0.64706,0.81176},
	{0.90588, 0.83137,0.90980},
	{0.96863, 0.96863,0.96863},
	{0.85098, 0.94118,0.82745},
	{0.65098, 0.85882,0.62745},
	{0.35294, 0.68235,0.38039},
	{0.10588, 0.47059,0.21569}};

 for (int i = 0; i < NCMAP; i++) {
    double x = i*(8 - 1e-10)/(NCMAP - 1);
    int j = x; x -= j;
    for (int k = 0; k < 3; k++)
      cmap[i][k] = (1. - x)*basemap[j][k] + x*basemap[j+1][k];
  }
}

void pink_yellow_green (double cmap[NCMAP][3])
{
/* generated by ../rgb2func.pl */
  static double basemap[][3] = {
	{0.77255, 0.10588,0.49020},
	{0.87059, 0.46667,0.68235},
	{0.94510, 0.71373,0.85490},
	{0.99216, 0.87843,0.93725},
	{0.96863, 0.96863,0.96863},
	{0.90196, 0.96078,0.81569},
	{0.72157, 0.88235,0.52549},
	{0.49804, 0.73725,0.25490},
	{0.30196, 0.57255,0.12941}};

 for (int i = 0; i < NCMAP; i++) {
    double x = i*(8 - 1e-10)/(NCMAP - 1);
    int j = x; x -= j;
    for (int k = 0; k < 3; k++)
      cmap[i][k] = (1. - x)*basemap[j][k] + x*basemap[j+1][k];
  }
}

void purple_orange (double cmap[NCMAP][3])
{
/* generated by ../rgb2func.pl */
  static double basemap[][3] = {
	{0.70196, 0.34510,0.02353},
	{0.87843, 0.50980,0.07843},
	{0.99216, 0.72157,0.38824},
	{0.99608, 0.87843,0.71373},
	{0.96863, 0.96863,0.96863},
	{0.84706, 0.85490,0.92157},
	{0.69804, 0.67059,0.82353},
	{0.50196, 0.45098,0.67451},
	{0.32941, 0.15294,0.53333}};

 for (int i = 0; i < NCMAP; i++) {
    double x = i*(8 - 1e-10)/(NCMAP - 1);
    int j = x; x -= j;
    for (int k = 0; k < 3; k++)
      cmap[i][k] = (1. - x)*basemap[j][k] + x*basemap[j+1][k];
  }
}

void red_blue (double cmap[NCMAP][3])
{
/* generated by ../rgb2func.pl */
  static double basemap[][3] = {
	{0.69804, 0.09412,0.16863},
	{0.83922, 0.37647,0.30196},
	{0.95686, 0.64706,0.50980},
	{0.99216, 0.85882,0.78039},
	{0.96863, 0.96863,0.96863},
	{0.81961, 0.89804,0.94118},
	{0.57255, 0.77255,0.87059},
	{0.26275, 0.57647,0.76471},
	{0.12941, 0.40000,0.67451}};

 for (int i = 0; i < NCMAP; i++) {
    double x = i*(8 - 1e-10)/(NCMAP - 1);
    int j = x; x -= j;
    for (int k = 0; k < 3; k++)
      cmap[i][k] = (1. - x)*basemap[j][k] + x*basemap[j+1][k];
  }
}

void red_gray (double cmap[NCMAP][3])
{
/* generated by ../rgb2func.pl */
  static double basemap[][3] = {
	{0.69804, 0.09412,0.16863},
	{0.83922, 0.37647,0.30196},
	{0.95686, 0.64706,0.50980},
	{0.99216, 0.85882,0.78039},
	{1.00000, 1.00000,1.00000},
	{0.87843, 0.87843,0.87843},
	{0.72941, 0.72941,0.72941},
	{0.52941, 0.52941,0.52941},
	{0.30196, 0.30196,0.30196}};

 for (int i = 0; i < NCMAP; i++) {
    double x = i*(8 - 1e-10)/(NCMAP - 1);
    int j = x; x -= j;
    for (int k = 0; k < 3; k++)
      cmap[i][k] = (1. - x)*basemap[j][k] + x*basemap[j+1][k];
  }
}

void red_yellow_blue (double cmap[NCMAP][3])
{
/* generated by ../rgb2func.pl */
  static double basemap[][3] = {
	{0.84314, 0.18824,0.15294},
	{0.95686, 0.42745,0.26275},
	{0.99216, 0.68235,0.38039},
	{0.99608, 0.87843,0.56471},
	{1.00000, 1.00000,0.74902},
	{0.87843, 0.95294,0.97255},
	{0.67059, 0.85098,0.91373},
	{0.45490, 0.67843,0.81961},
	{0.27059, 0.45882,0.70588}};

 for (int i = 0; i < NCMAP; i++) {
    double x = i*(8 - 1e-10)/(NCMAP - 1);
    int j = x; x -= j;
    for (int k = 0; k < 3; k++)
      cmap[i][k] = (1. - x)*basemap[j][k] + x*basemap[j+1][k];
  }
}

void red_yellow_green (double cmap[NCMAP][3])
{
/* generated by ../rgb2func.pl */
  static double basemap[][3] = {
	{0.84314, 0.18824,0.15294},
	{0.95686, 0.42745,0.26275},
	{0.99216, 0.68235,0.38039},
	{0.99608, 0.87843,0.54510},
	{1.00000, 1.00000,0.74902},
	{0.85098, 0.93725,0.54510},
	{0.65098, 0.85098,0.41569},
	{0.40000, 0.74118,0.38824},
	{0.10196, 0.59608,0.31373}};

 for (int i = 0; i < NCMAP; i++) {
    double x = i*(8 - 1e-10)/(NCMAP - 1);
    int j = x; x -= j;
    for (int k = 0; k < 3; k++)
      cmap[i][k] = (1. - x)*basemap[j][k] + x*basemap[j+1][k];
  }
}

void spectral (double cmap[NCMAP][3])
{
/* generated by ../rgb2func.pl */
  static double basemap[][3] = {
	{0.83529, 0.24314,0.30980},
	{0.95686, 0.42745,0.26275},
	{0.99216, 0.68235,0.38039},
	{0.99608, 0.87843,0.54510},
	{1.00000, 1.00000,0.74902},
	{0.90196, 0.96078,0.59608},
	{0.67059, 0.86667,0.64314},
	{0.40000, 0.76078,0.64706},
	{0.19608, 0.53333,0.74118}};

 for (int i = 0; i < NCMAP; i++) {
    double x = i*(8 - 1e-10)/(NCMAP - 1);
    int j = x; x -= j;
    for (int k = 0; k < 3; k++)
      cmap[i][k] = (1. - x)*basemap[j][k] + x*basemap[j+1][k];
  }
}
