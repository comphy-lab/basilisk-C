/* Sequential colormaps from colorbrewer2.org 
  I believe they are uncopyrighted as trivial wrapper around public domain  data */


void blue_green (double cmap[NCMAP][3])
{
/* generated by ../rgb2func.pl */
  static double basemap[][3] = {
	{0.96863, 0.98824,0.99216},
	{0.89804, 0.96078,0.97647},
	{0.80000, 0.92549,0.90196},
	{0.60000, 0.84706,0.78824},
	{0.40000, 0.76078,0.64314},
	{0.25490, 0.68235,0.46275},
	{0.13725, 0.54510,0.27059},
	{0.00000, 0.42745,0.17255},
	{0.00000, 0.26667,0.10588}};

 for (int i = 0; i < NCMAP; i++) {
    double x = i*(8 - 1e-10)/(NCMAP - 1);
    int j = x; x -= j;
    for (int k = 0; k < 3; k++)
      cmap[i][k] = (1. - x)*basemap[j][k] + x*basemap[j+1][k];
  }
}

void blue_purple (double cmap[NCMAP][3])
{
/* generated by ../rgb2func.pl */
  static double basemap[][3] = {
	{0.96863, 0.98824,0.99216},
	{0.87843, 0.92549,0.95686},
	{0.74902, 0.82745,0.90196},
	{0.61961, 0.73725,0.85490},
	{0.54902, 0.58824,0.77647},
	{0.54902, 0.41961,0.69412},
	{0.53333, 0.25490,0.61569},
	{0.50588, 0.05882,0.48627},
	{0.30196, 0.00000,0.29412}};

 for (int i = 0; i < NCMAP; i++) {
    double x = i*(8 - 1e-10)/(NCMAP - 1);
    int j = x; x -= j;
    for (int k = 0; k < 3; k++)
      cmap[i][k] = (1. - x)*basemap[j][k] + x*basemap[j+1][k];
  }
}

void blues (double cmap[NCMAP][3])
{
/* generated by ../rgb2func.pl */
  static double basemap[][3] = {
	{0.96863, 0.98431,1.00000},
	{0.87059, 0.92157,0.96863},
	{0.77647, 0.85882,0.93725},
	{0.61961, 0.79216,0.88235},
	{0.41961, 0.68235,0.83922},
	{0.25882, 0.57255,0.77647},
	{0.12941, 0.44314,0.70980},
	{0.03137, 0.31765,0.61176},
	{0.03137, 0.18824,0.41961}};

 for (int i = 0; i < NCMAP; i++) {
    double x = i*(8 - 1e-10)/(NCMAP - 1);
    int j = x; x -= j;
    for (int k = 0; k < 3; k++)
      cmap[i][k] = (1. - x)*basemap[j][k] + x*basemap[j+1][k];
  }
}

void green_blue (double cmap[NCMAP][3])
{
/* generated by ../rgb2func.pl */
  static double basemap[][3] = {
	{0.96863, 0.98824,0.94118},
	{0.87843, 0.95294,0.85882},
	{0.80000, 0.92157,0.77255},
	{0.65882, 0.86667,0.70980},
	{0.48235, 0.80000,0.76863},
	{0.30588, 0.70196,0.82745},
	{0.16863, 0.54902,0.74510},
	{0.03137, 0.40784,0.67451},
	{0.03137, 0.25098,0.50588}};

 for (int i = 0; i < NCMAP; i++) {
    double x = i*(8 - 1e-10)/(NCMAP - 1);
    int j = x; x -= j;
    for (int k = 0; k < 3; k++)
      cmap[i][k] = (1. - x)*basemap[j][k] + x*basemap[j+1][k];
  }
}

void greens (double cmap[NCMAP][3])
{
/* generated by ../rgb2func.pl */
  static double basemap[][3] = {
	{0.96863, 0.98824,0.96078},
	{0.89804, 0.96078,0.87843},
	{0.78039, 0.91373,0.75294},
	{0.63137, 0.85098,0.60784},
	{0.45490, 0.76863,0.46275},
	{0.25490, 0.67059,0.36471},
	{0.13725, 0.54510,0.27059},
	{0.00000, 0.42745,0.17255},
	{0.00000, 0.26667,0.10588}};

 for (int i = 0; i < NCMAP; i++) {
    double x = i*(8 - 1e-10)/(NCMAP - 1);
    int j = x; x -= j;
    for (int k = 0; k < 3; k++)
      cmap[i][k] = (1. - x)*basemap[j][k] + x*basemap[j+1][k];
  }
}

void greys (double cmap[NCMAP][3])
{
/* generated by ../rgb2func.pl */
  static double basemap[][3] = {
	{0.21569, 1.00000,1.00000},
	{0.94118, 0.94118,0.94118},
	{0.85098, 0.85098,0.85098},
	{0.74118, 0.74118,0.74118},
	{0.58824, 0.58824,0.58824},
	{0.45098, 0.45098,0.45098},
	{0.32157, 0.32157,0.32157},
	{0.14510, 0.14510,0.14510},
	{0.00000, 0.00000,0.00000}};

 for (int i = 0; i < NCMAP; i++) {
    double x = i*(8 - 1e-10)/(NCMAP - 1);
    int j = x; x -= j;
    for (int k = 0; k < 3; k++)
      cmap[i][k] = (1. - x)*basemap[j][k] + x*basemap[j+1][k];
  }
}

void orange_red (double cmap[NCMAP][3])
{
/* generated by ../rgb2func.pl */
  static double basemap[][3] = {
	{1.00000, 0.96863,0.92549},
	{0.99608, 0.90980,0.78431},
	{0.99216, 0.83137,0.61961},
	{0.99216, 0.73333,0.51765},
	{0.98824, 0.55294,0.34902},
	{0.93725, 0.39608,0.28235},
	{0.84314, 0.18824,0.12157},
	{0.70196, 0.00000,0.00000},
	{0.49804, 0.00000,0.00000}};

 for (int i = 0; i < NCMAP; i++) {
    double x = i*(8 - 1e-10)/(NCMAP - 1);
    int j = x; x -= j;
    for (int k = 0; k < 3; k++)
      cmap[i][k] = (1. - x)*basemap[j][k] + x*basemap[j+1][k];
  }
}

void oranges (double cmap[NCMAP][3])
{
/* generated by ../rgb2func.pl */
  static double basemap[][3] = {
	{1.00000, 0.96078,0.92157},
	{0.99608, 0.90196,0.80784},
	{0.99216, 0.81569,0.63529},
	{0.99216, 0.68235,0.41961},
	{0.99216, 0.55294,0.23529},
	{0.94510, 0.41176,0.07451},
	{0.85098, 0.28235,0.00392},
	{0.65098, 0.21176,0.01176},
	{0.49804, 0.15294,0.01569}};

 for (int i = 0; i < NCMAP; i++) {
    double x = i*(8 - 1e-10)/(NCMAP - 1);
    int j = x; x -= j;
    for (int k = 0; k < 3; k++)
      cmap[i][k] = (1. - x)*basemap[j][k] + x*basemap[j+1][k];
  }
}

void purple_blue (double cmap[NCMAP][3])
{
/* generated by ../rgb2func.pl */
  static double basemap[][3] = {
	{1.00000, 0.96863,0.98431},
	{0.92549, 0.90588,0.94902},
	{0.81569, 0.81961,0.90196},
	{0.65098, 0.74118,0.85882},
	{0.45490, 0.66275,0.81176},
	{0.21176, 0.56471,0.75294},
	{0.01961, 0.43922,0.69020},
	{0.01569, 0.35294,0.55294},
	{0.00784, 0.21961,0.34510}};

 for (int i = 0; i < NCMAP; i++) {
    double x = i*(8 - 1e-10)/(NCMAP - 1);
    int j = x; x -= j;
    for (int k = 0; k < 3; k++)
      cmap[i][k] = (1. - x)*basemap[j][k] + x*basemap[j+1][k];
  }
}

void purple_blue_green (double cmap[NCMAP][3])
{
/* generated by ../rgb2func.pl */
  static double basemap[][3] = {
	{1.00000, 0.96863,0.98431},
	{0.92549, 0.88627,0.94118},
	{0.81569, 0.81961,0.90196},
	{0.65098, 0.74118,0.85882},
	{0.40392, 0.66275,0.81176},
	{0.21176, 0.56471,0.75294},
	{0.00784, 0.50588,0.54118},
	{0.00392, 0.42353,0.34902},
	{0.00392, 0.27451,0.21176}};

 for (int i = 0; i < NCMAP; i++) {
    double x = i*(8 - 1e-10)/(NCMAP - 1);
    int j = x; x -= j;
    for (int k = 0; k < 3; k++)
      cmap[i][k] = (1. - x)*basemap[j][k] + x*basemap[j+1][k];
  }
}

void purple_red (double cmap[NCMAP][3])
{
/* generated by ../rgb2func.pl */
  static double basemap[][3] = {
	{0.96863, 0.95686,0.97647},
	{0.90588, 0.88235,0.93725},
	{0.83137, 0.72549,0.85490},
	{0.78824, 0.58039,0.78039},
	{0.87451, 0.39608,0.69020},
	{0.90588, 0.16078,0.54118},
	{0.80784, 0.07059,0.33725},
	{0.59608, 0.00000,0.26275},
	{0.40392, 0.00000,0.12157}};

 for (int i = 0; i < NCMAP; i++) {
    double x = i*(8 - 1e-10)/(NCMAP - 1);
    int j = x; x -= j;
    for (int k = 0; k < 3; k++)
      cmap[i][k] = (1. - x)*basemap[j][k] + x*basemap[j+1][k];
  }
}

void purples (double cmap[NCMAP][3])
{
/* generated by ../rgb2func.pl */
  static double basemap[][3] = {
	{0.98824, 0.98431,0.99216},
	{0.93725, 0.92941,0.96078},
	{0.85490, 0.85490,0.92157},
	{0.73725, 0.74118,0.86275},
	{0.61961, 0.60392,0.78431},
	{0.50196, 0.49020,0.72941},
	{0.41569, 0.31765,0.63922},
	{0.32941, 0.15294,0.56078},
	{0.24706, 0.00000,0.49020}};

 for (int i = 0; i < NCMAP; i++) {
    double x = i*(8 - 1e-10)/(NCMAP - 1);
    int j = x; x -= j;
    for (int k = 0; k < 3; k++)
      cmap[i][k] = (1. - x)*basemap[j][k] + x*basemap[j+1][k];
  }
}

void red_purple (double cmap[NCMAP][3])
{
/* generated by ../rgb2func.pl */
  static double basemap[][3] = {
	{1.00000, 0.96863,0.95294},
	{0.99216, 0.87843,0.86667},
	{0.98824, 0.77255,0.75294},
	{0.98039, 0.62353,0.70980},
	{0.96863, 0.40784,0.63137},
	{0.86667, 0.20392,0.59216},
	{0.68235, 0.00392,0.49412},
	{0.47843, 0.00392,0.46667},
	{0.28627, 0.00000,0.41569}};

 for (int i = 0; i < NCMAP; i++) {
    double x = i*(8 - 1e-10)/(NCMAP - 1);
    int j = x; x -= j;
    for (int k = 0; k < 3; k++)
      cmap[i][k] = (1. - x)*basemap[j][k] + x*basemap[j+1][k];
  }
}

void reds (double cmap[NCMAP][3])
{
/* generated by ../rgb2func.pl */
  static double basemap[][3] = {
	{1.00000, 0.96078,0.94118},
	{0.99608, 0.87843,0.82353},
	{0.98824, 0.73333,0.63137},
	{0.98824, 0.57255,0.44706},
	{0.98431, 0.41569,0.29020},
	{0.93725, 0.23137,0.17255},
	{0.79608, 0.09412,0.11373},
	{0.64706, 0.05882,0.08235},
	{0.40392, 0.00000,0.05098}};

 for (int i = 0; i < NCMAP; i++) {
    double x = i*(8 - 1e-10)/(NCMAP - 1);
    int j = x; x -= j;
    for (int k = 0; k < 3; k++)
      cmap[i][k] = (1. - x)*basemap[j][k] + x*basemap[j+1][k];
  }
}

void yellow_green (double cmap[NCMAP][3])
{
/* generated by ../rgb2func.pl */
  static double basemap[][3] = {
	{1.00000, 1.00000,0.89804},
	{0.96863, 0.98824,0.72549},
	{0.85098, 0.94118,0.63922},
	{0.67843, 0.86667,0.55686},
	{0.47059, 0.77647,0.47451},
	{0.25490, 0.67059,0.36471},
	{0.13725, 0.51765,0.26275},
	{0.00000, 0.40784,0.21569},
	{0.00000, 0.27059,0.16078}};

 for (int i = 0; i < NCMAP; i++) {
    double x = i*(8 - 1e-10)/(NCMAP - 1);
    int j = x; x -= j;
    for (int k = 0; k < 3; k++)
      cmap[i][k] = (1. - x)*basemap[j][k] + x*basemap[j+1][k];
  }
}

void yellow_green_blues (double cmap[NCMAP][3])
{
/* generated by ../rgb2func.pl */
  static double basemap[][3] = {
	{1.00000, 1.00000,0.85098},
	{0.92941, 0.97255,0.69412},
	{0.78039, 0.91373,0.70588},
	{0.49804, 0.80392,0.73333},
	{0.25490, 0.71373,0.76863},
	{0.11373, 0.56863,0.75294},
	{0.13333, 0.36863,0.65882},
	{0.14510, 0.20392,0.58039},
	{0.03137, 0.11373,0.34510}};

 for (int i = 0; i < NCMAP; i++) {
    double x = i*(8 - 1e-10)/(NCMAP - 1);
    int j = x; x -= j;
    for (int k = 0; k < 3; k++)
      cmap[i][k] = (1. - x)*basemap[j][k] + x*basemap[j+1][k];
  }
}

void yellow_orange_brown (double cmap[NCMAP][3])
{
/* generated by ../rgb2func.pl */
  static double basemap[][3] = {
	{1.00000, 1.00000,0.89804},
	{1.00000, 0.96863,0.73725},
	{0.99608, 0.89020,0.56863},
	{0.99608, 0.76863,0.30980},
	{0.99608, 0.60000,0.16078},
	{0.92549, 0.43922,0.07843},
	{0.80000, 0.29804,0.00784},
	{0.60000, 0.20392,0.01569},
	{0.40000, 0.14510,0.02353}};

 for (int i = 0; i < NCMAP; i++) {
    double x = i*(8 - 1e-10)/(NCMAP - 1);
    int j = x; x -= j;
    for (int k = 0; k < 3; k++)
      cmap[i][k] = (1. - x)*basemap[j][k] + x*basemap[j+1][k];
  }
}

void yellow_orange_red (double cmap[NCMAP][3])
{
/* generated by ../rgb2func.pl */
  static double basemap[][3] = {
	{1.00000, 1.00000,0.80000},
	{1.00000, 0.92941,0.62745},
	{0.99608, 0.85098,0.46275},
	{0.99608, 0.69804,0.29804},
	{0.99216, 0.55294,0.23529},
	{0.98824, 0.30588,0.16471},
	{0.89020, 0.10196,0.10980},
	{0.74118, 0.00000,0.14902},
	{0.50196, 0.00000,0.14902}};

 for (int i = 0; i < NCMAP; i++) {
    double x = i*(8 - 1e-10)/(NCMAP - 1);
    int j = x; x -= j;
    for (int k = 0; k < 3; k++)
      cmap[i][k] = (1. - x)*basemap[j][k] + x*basemap[j+1][k];
  }
}