/**#Horizontal gradients

h_relative is a flag to indicate if the layer indexing is relative or absolute. This should be set to true in a foreach_layer loop and false otherwise.

Comments will come eventually.

   First derivative at layer centre 
*/

double h_1st_derivative_O_2_centre_NeumannNeumann(Point point, scalar s,int active_layer, bool h_relative, scalar zl, scalar dst, scalar dsb)
{
  int l = (h_relative ? 0 : active_layer);
  double d = (s[1,0,l]-s[-1,0,l])/(2.*Delta);
  if (active_layer < nl-1 && active_layer > 0){
    //d+=(s[1,0,l]-s[-1,0,l])/(2.*Delta);
    d-=( ((h[0,0,l]+2.*h[0,0,l-1])*(s[0,0,l+1]-s[0,0,l])/(h[0,0,l+1]+h[0,0,l])+(2.*h[0,0,l+1]+h[0,0,l])*(s[0,0,l]-s[0,0,l-1])/(h[0,0,l]+h[0,0,l-1]))/(h[0,0,l+1]+h[0,0,l]+h[0,0,l-1]) )
      *  (zl[1,0,l]+h[1,0,l]/2.-zl[-1,0,l]-h[-1,0,l]/2.)/(2.*Delta);
    
    d-=(((h[1,0,l]+2.*h[1,0,l-1])*(s[1,0,l+1]-s[1,0,l])/(h[1,0,l+1]+h[1,0,l])+(2.*h[1,0,l+1]+h[1,0,l])*(s[1,0,l]-s[1,0,l-1])/(h[1,0,l]+h[1,0,l-1]))/(h[1,0,l+1]+h[1,0,l]+h[1,0,l-1])
	- ((h[-1,0,l]+2.*h[-1,0,l-1])*(s[-1,0,l+1]-s[-1,0,l])/(h[-1,0,l+1]+h[-1,0,l])+(2.*h[-1,0,l+1]+h[-1,0,l])*(s[-1,0,l]-s[-1,0,l-1])/(h[-1,0,l]+h[-1,0,l-1]))/(h[-1,0,l+1]+h[-1,0,l]+h[-1,0,l-1]) )
      *  (zl[1,0,l]-2.*zl[0,0,l]+zl[-1,0,l]+h[1,0,l]/2.-h[0,0,l]+h[-1,0,l]/2.)/(4.*Delta);
  }
  else {
    if (active_layer == 0 && active_layer < nl-1){
      //d+=(s[1,0,l]-s[-1,0,l])/(2.*Delta);
      d-=((s[0,0,l+1]-s[0,0,l])/(h[0,0,l]+h[0,0,l+1])*(3.*h[0,0,l])/(2.*h[0,0,l]+h[0,0,l+1])+(1./2.)*dsb[0,0]*(h[0,0,l]+2.*h[0,0,l+1])/(2.*h[0,0,l]+h[0,0,l+1]))
	*  (zl[1,0,l]+h[1,0,l]/2.-zl[-1,0,l]-h[-1,0,l]/2.)/(2.*Delta);
      
      d-=(  ((s[1,0,l+1]-s[1,0,l])/(h[1,0,l]+h[1,0,l+1])*(3.*h[1,0,l])/(2.*h[1,0,l]+h[1,0,l+1])+(1./2.)*dsb[1,0]*(h[1,0,l]+2.*h[1,0,l+1])/(2.*h[1,0,l]+h[1,0,l+1]))
	    -  ((s[-1,0,l+1]-s[-1,0,l])/(h[-1,0,l]+h[-1,0,l+1])*(3.*h[-1,0,l])/(2.*h[-1,0,l]+h[-1,0,l+1])+(1./2.)*dsb[-1,0]*(h[-1,0,l]+2.*h[-1,0,l+1])/(2.*h[-1,0,l]+h[-1,0,l+1]))  )
	* (zl[1,0,l]-2.*zl[0,0,l]+zl[-1,0,l]+h[1,0,l]/2.-h[0,0,l]+h[-1,0,l]/2.)/(4.*Delta);
    }
    else{
      if (active_layer == nl-1 && active_layer > 0){
	//d+=(s[1,0,l]-s[-1,0,l])/(2.*Delta);
	d-=((s[0,0,l]-s[0,0,l-1])/(h[0,0,l]+h[0,0,l-1])*(3.*h[0,0,l])/(2.*h[0,0,l]+h[0,0,l-1])+(1./2.)*dst[0,0]*(h[0,0,l]+2.*h[0,0,l-1])/(2.*h[0,0,l]+h[0,0,l-1]))
	  *  (zl[1,0,l]+h[1,0,l]/2.-zl[-1,0,l]-h[-1,0,l]/2.)/(2.*Delta);
	
	d-=( ((s[1,0,l]-s[1,0,l-1])/(h[1,0,l]+h[1,0,l-1])*(3.*h[1,0,l])/(2.*h[1,0,l]+h[1,0,l-1])+(1./2.)*dst[1,0]*(h[1,0,l]+2.*h[1,0,l-1])/(2.*h[1,0,l]+h[1,0,l-1]))
	     -  ((s[-1,0,l]-s[-1,0,l-1])/(h[-1,0,l]+h[-1,0,l-1])*(3.*h[-1,0,l])/(2.*h[-1,0,l]+h[-1,0,l-1])+(1./2.)*dst[-1,0]*(h[-1,0,l]+2.*h[-1,0,l-1])/(2.*h[-1,0,l]+h[-1,0,l-1])) )
	  *  (zl[1,0,l]-2.*zl[0,0,l]+zl[-1,0,l]+h[1,0,l]/2.-h[0,0,l]+h[-1,0,l]/2.)/(4.*Delta);
      }
      else{
	d-=(dst[0,0]+dsb[0,0])*(zl[1,0,l]+h[1,0,l]/2.-zl[-1,0,l]-h[-1,0,l]/2.)/(4.*Delta);
	d-=((dst[1,0]+dsb[1,0])-(dst[-1,0]+dsb[-1,0]))*(zl[1,0,l]-2.*zl[0,0,l]+zl[-1,0,l]+h[1,0,l]/2.-h[0,0,l]+h[-1,0,l]/2.)/(8.*Delta);
      }
    }
  }
  return d;
}

double h_1st_derivative_O_2_centre_DirichletNeumann(Point point, scalar s,int active_layer, bool h_relative, scalar zl, scalar st, scalar dsb)
{
  int l = (h_relative ? 0 : active_layer);
  double d = (s[1,0,l]-s[-1,0,l])/(2.*Delta);
  if (active_layer < nl-1 && active_layer > 0){
    //d+=(s[1,0,l]-s[-1,0,l])/(2.*Delta);
    d-=( ((h[0,0,l]+2.*h[0,0,l-1])*(s[0,0,l+1]-s[0,0,l])/(h[0,0,l+1]+h[0,0,l])+(2.*h[0,0,l+1]+h[0,0,l])*(s[0,0,l]-s[0,0,l-1])/(h[0,0,l]+h[0,0,l-1]))/(h[0,0,l+1]+h[0,0,l]+h[0,0,l-1]) )
      *  (zl[1,0,l]+h[1,0,l]/2.-zl[-1,0,l]-h[-1,0,l]/2.)/(2.*Delta);
      
    d-=(((h[1,0,l]+2.*h[1,0,l-1])*(s[1,0,l+1]-s[1,0,l])/(h[1,0,l+1]+h[1,0,l])+(2.*h[1,0,l+1]+h[1,0,l])*(s[1,0,l]-s[1,0,l-1])/(h[1,0,l]+h[1,0,l-1]))/(h[1,0,l+1]+h[1,0,l]+h[1,0,l-1])
	- ((h[-1,0,l]+2.*h[-1,0,l-1])*(s[-1,0,l+1]-s[-1,0,l])/(h[-1,0,l+1]+h[-1,0,l])+(2.*h[-1,0,l+1]+h[-1,0,l])*(s[-1,0,l]-s[-1,0,l-1])/(h[-1,0,l]+h[-1,0,l-1]))/(h[-1,0,l+1]+h[-1,0,l]+h[-1,0,l-1]) )
      *  (zl[1,0,l]-2.*zl[0,0,l]+zl[-1,0,l]+h[1,0,l]/2.-h[0,0,l]+h[-1,0,l]/2.)/(4.*Delta);
  }
  else {
    if (active_layer == 0 && active_layer < nl-1){
      //d+=(s[1,0,l]-s[-1,0,l])/(2.*Delta);
      d-=((s[0,0,l+1]-s[0,0,l])/(h[0,0,l]+h[0,0,l+1])*(3.*h[0,0,l])/(2.*h[0,0,l]+h[0,0,l+1])+(1./2.)*dsb[0,0]*(h[0,0,l]+2.*h[0,0,l+1])/(2.*h[0,0,l]+h[0,0,l+1]))
	*  (zl[1,0,l]+h[1,0,l]/2.-zl[-1,0,l]-h[-1,0,l]/2.)/(2.*Delta);
      
      d-=(  ((s[1,0,l+1]-s[1,0,l])/(h[1,0,l]+h[1,0,l+1])*(3.*h[1,0,l])/(2.*h[1,0,l]+h[1,0,l+1])+(1./2.)*dsb[1,0]*(h[1,0,l]+2.*h[1,0,l+1])/(2.*h[1,0,l]+h[1,0,l+1]))
	    -  ((s[-1,0,l+1]-s[-1,0,l])/(h[-1,0,l]+h[-1,0,l+1])*(3.*h[-1,0,l])/(2.*h[-1,0,l]+h[-1,0,l+1])+(1./2.)*dsb[-1,0]*(h[-1,0,l]+2.*h[-1,0,l+1])/(2.*h[-1,0,l]+h[-1,0,l+1]))  )
	* (zl[1,0,l]-2.*zl[0,0,l]+zl[-1,0,l]+h[1,0,l]/2.-h[0,0,l]+h[-1,0,l]/2.)/(4.*Delta);
    }
    else{
      if (active_layer == nl-1 && active_layer > 0){
	//d+=(s[1,0,l]-s[-1,0,l])/(2.*Delta);
	//d-=(((h[0,0,l]+2.*h[0,0,l-1])*(h[0,0,l]+h[0,0,l-1])*st[0,0]-h[0,0,l-1]*(3.*h[0,0,l]+2.*h[0,0,l-1])*s[0,0,l]-sq(h[0,0,l])*s[0,0,l-1])/(h[0,0,l]*sq(h[0,0,l]+h[0,0,l-1])))
	//  *  (zl[1,0,l]+h[1,0,l]/2.-zl[-1,0,l]-h[-1,0,l]/2.)/(2.*Delta);
	
	//d-=( ((h[1,0,l]+2.*h[1,0,l-1])*(h[1,0,l]+h[1,0,l-1])*st[1,0]-h[1,0,l-1]*(3.*h[1,0,l]+2.*h[1,0,l-1])*s[1,0,l]-sq(h[1,0,l])*s[1,0,l-1])/(h[1,0,l]*sq(h[1,0,l]+h[1,0,l-1]))
	//     -  ((h[-1,0,l]+2.*h[-1,0,l-1])*(h[-1,0,l]+h[-1,0,l-1])*st[-1,0]-h[-1,0,l-1]*(3.*h[-1,0,l]+2.*h[-1,0,l-1])*s[-1,0,l]-sq(h[-1,0,l])*s[-1,0,l-1])/(h[-1,0,l]*sq(h[-1,0,l]+h[-1,0,l-1])) )
	// *   (zl[1,0,l]-2.*zl[0,0,l]+zl[-1,0,l]+h[1,0,l]/2.-h[0,0,l]+h[-1,0,l]/2.)/(4.*Delta);
	
	d-=((6.*st[0,0]-5.*s[0,0,l]-s[0,0,l-1])/(4.*h[0,0,l]))*(zl[1,0,l]+h[1,0,l]/2.-zl[-1,0,l]-h[-1,0,l]/2.)/(2.*Delta);
	d-=(((6.*st[1,0]-5.*s[1,0,l]-s[1,0,l-1])/(4.*h[1,0,l]))-((6.*st[-1,0]-5.*s[-1,0,l]-s[-1,0,l-1])/(4.*h[-1,0,l])))*(zl[1,0,l]-2.*zl[0,0,l]+zl[-1,0,l]+h[1,0,l]/2.-h[0,0,l]+h[-1,0,l]/2.)/(4.*Delta);
      }
      else{
	d-=((3./2.)*(st[0,0]-s[0,0,l])/h[0,0,l]+dsb[0,0]/4.)*(zl[1,0,l]+h[1,0,l]/2.-zl[-1,0,l]-h[-1,0,l]/2.)/(2.*Delta);
	d-=(((3./2.)*(st[1,0]-s[1,0,l])/h[1,0,l]+dsb[1,0]/4.)-((3./2.)*(st[-1,0]-s[-1,0,l])/h[-1,0,l]+dsb[-1,0]/4.))*(zl[1,0,l]-2.*zl[0,0,l]+zl[-1,0,l]+h[1,0,l]/2.-h[0,0,l]+h[-1,0,l]/2.)/(4.*Delta);
      }
    }
  }
  return d;
}

double h_1st_derivative_O_2_centre_NeumannDirichlet(Point point, scalar s,int active_layer, bool h_relative, scalar zl, scalar dst, scalar sb)
{
  int l = (h_relative ? 0 : active_layer);
  double d = (s[1,0,l]-s[-1,0,l])/(2.*Delta);
  if (active_layer < nl-1 && active_layer > 0){
    //d+=(s[1,0,l]-s[-1,0,l])/(2.*Delta);
    d-=( ((h[0,0,l]+2.*h[0,0,l-1])*(s[0,0,l+1]-s[0,0,l])/(h[0,0,l+1]+h[0,0,l])+(2.*h[0,0,l+1]+h[0,0,l])*(s[0,0,l]-s[0,0,l-1])/(h[0,0,l]+h[0,0,l-1]))/(h[0,0,l+1]+h[0,0,l]+h[0,0,l-1]) )
      *  (zl[1,0,l]+h[1,0,l]/2.-zl[-1,0,l]-h[-1,0,l]/2.)/(2.*Delta);
    
    d-=(((h[1,0,l]+2.*h[1,0,l-1])*(s[1,0,l+1]-s[1,0,l])/(h[1,0,l+1]+h[1,0,l])+(2.*h[1,0,l+1]+h[1,0,l])*(s[1,0,l]-s[1,0,l-1])/(h[1,0,l]+h[1,0,l-1]))/(h[1,0,l+1]+h[1,0,l]+h[1,0,l-1])
	- ((h[-1,0,l]+2.*h[-1,0,l-1])*(s[-1,0,l+1]-s[-1,0,l])/(h[-1,0,l+1]+h[-1,0,l])+(2.*h[-1,0,l+1]+h[-1,0,l])*(s[-1,0,l]-s[-1,0,l-1])/(h[-1,0,l]+h[-1,0,l-1]))/(h[-1,0,l+1]+h[-1,0,l]+h[-1,0,l-1]) )
      *  (zl[1,0,l]-2.*zl[0,0,l]+zl[-1,0,l]+h[1,0,l]/2.-h[0,0,l]+h[-1,0,l]/2.)/(4.*Delta);
  }
  else {
    if (active_layer == 0 && active_layer < nl-1){
      //d+=(s[1,0,l]-s[-1,0,l])/(2.*Delta);
      d-=((h[0,0,l+1]*(3.*h[0,0,l]+2.*h[0,0,l+1])*s[0,0,l]+sq(h[0,0,l])*s[0,0,l+1]-(h[0,0,l]+2.*h[0,0,l+1])*(h[0,0,l]+h[0,0,l+1])*sb[0,0])/(h[0,0,l]*sq(h[0,0,l]+h[0,0,l+1])))
	*  (zl[1,0,l]+h[1,0,l]/2.-zl[-1,0,l]-h[-1,0,l]/2.)/(2.*Delta);
      
      d-=( (h[1,0,l+1]*(3.*h[1,0,l]+2.*h[1,0,l+1])*s[1,0,l]+sq(h[1,0,l])*s[1,0,l+1]-(h[1,0,l]+2.*h[1,0,l+1])*(h[1,0,l]+h[1,0,l+1])*sb[1,0])/(h[1,0,l]*sq(h[1,0,l]+h[1,0,l+1]))
	   -  (h[-1,0,l+1]*(3.*h[-1,0,l]+2.*h[-1,0,l+1])*s[-1,0,l]+sq(h[-1,0,l])*s[-1,0,l+1]-(h[-1,0,l]+2.*h[-1,0,l+1])*(h[-1,0,l]+h[-1,0,l+1])*sb[-1,0])/(h[-1,0,l]*sq(h[-1,0,l]+h[-1,0,l+1])) )
	*   (zl[1,0,l]-2.*zl[0,0,l]+zl[-1,0,l]+h[1,0,l]/2.-h[0,0,l]+h[-1,0,l]/2.)/(4.*Delta);
    }
    else{
      if (active_layer == nl-1 && active_layer > 0){
	//d+=(s[1,0,l]-s[-1,0,l])/(2.*Delta);
	d-=((s[0,0,l]-s[0,0,l-1])/(h[0,0,l]+h[0,0,l-1])*(3.*h[0,0,l])/(2.*h[0,0,l]+h[0,0,l-1])+(1./2.)*dst[0,0]*(h[0,0,l]+2.*h[0,0,l-1])/(2.*h[0,0,l]+h[0,0,l-1]))
	  *  (zl[1,0,l]+h[1,0,l]/2.-zl[-1,0,l]-h[-1,0,l]/2.)/(2.*Delta);
	
	d-=( ((s[1,0,l]-s[1,0,l-1])/(h[1,0,l]+h[1,0,l-1])*(3.*h[1,0,l])/(2.*h[1,0,l]+h[1,0,l-1])+(1./2.)*dst[1,0]*(h[1,0,l]+2.*h[1,0,l-1])/(2.*h[1,0,l]+h[1,0,l-1]))
	     -  ((s[-1,0,l]-s[-1,0,l-1])/(h[-1,0,l]+h[-1,0,l-1])*(3.*h[-1,0,l])/(2.*h[-1,0,l]+h[-1,0,l-1])+(1./2.)*dst[-1,0]*(h[-1,0,l]+2.*h[-1,0,l-1])/(2.*h[-1,0,l]+h[-1,0,l-1])) )
	  *  (zl[1,0,l]-2.*zl[0,0,l]+zl[-1,0,l]+h[1,0,l]/2.-h[0,0,l]+h[-1,0,l]/2.)/(4.*Delta);
      }
      else{
	d-=((3./2.)*(s[0,0,l]-sb[0,0])/h[0,0,l]+dst[0,0]/4.)*(zl[1,0,l]+h[1,0,l]/2.-zl[-1,0,l]-h[-1,0,l]/2.)/(2.*Delta);
	d-=(((3./2.)*(s[1,0,l]-sb[1,0])/h[1,0,l]+dst[1,0]/4.)-((3./2.)*(s[-1,0,l]-sb[-1,0])/h[-1,0,l]+dst[-1,0]/4.))*(zl[1,0,l]-2.*zl[0,0,l]+zl[-1,0,l]+h[1,0,l]/2.-h[0,0,l]+h[-1,0,l]/2.)/(4.*Delta);
      }
    }
  }
  return d;
}

double h_1st_derivative_O_2_centre_DirichletDirichlet(Point point, scalar s,int active_layer, bool h_relative, scalar zl, scalar st, scalar sb)
{
  int l = (h_relative ? 0 : active_layer);
  double d = (s[1,0,l]-s[-1,0,l])/(2.*Delta);
  if (active_layer < nl-1 && active_layer > 0){
    //d+=(s[1,0,l]-s[-1,0,l])/(2.*Delta);
    d-=( ((h[0,0,l]+2.*h[0,0,l-1])*(s[0,0,l+1]-s[0,0,l])/(h[0,0,l+1]+h[0,0,l])+(2.*h[0,0,l+1]+h[0,0,l])*(s[0,0,l]-s[0,0,l-1])/(h[0,0,l]+h[0,0,l-1]))/(h[0,0,l+1]+h[0,0,l]+h[0,0,l-1]) )
      *  (zl[1,0,l]+h[1,0,l]/2.-zl[-1,0,l]-h[-1,0,l]/2.)/(2.*Delta);
    
    d-=(((h[1,0,l]+2.*h[1,0,l-1])*(s[1,0,l+1]-s[1,0,l])/(h[1,0,l+1]+h[1,0,l])+(2.*h[1,0,l+1]+h[1,0,l])*(s[1,0,l]-s[1,0,l-1])/(h[1,0,l]+h[1,0,l-1]))/(h[1,0,l+1]+h[1,0,l]+h[1,0,l-1])
	- ((h[-1,0,l]+2.*h[-1,0,l-1])*(s[-1,0,l+1]-s[-1,0,l])/(h[-1,0,l+1]+h[-1,0,l])+(2.*h[-1,0,l+1]+h[-1,0,l])*(s[-1,0,l]-s[-1,0,l-1])/(h[-1,0,l]+h[-1,0,l-1]))/(h[-1,0,l+1]+h[-1,0,l]+h[-1,0,l-1]) )
      *  (zl[1,0,l]-2.*zl[0,0,l]+zl[-1,0,l]+h[1,0,l]/2.-h[0,0,l]+h[-1,0,l]/2.)/(4.*Delta);
  }
  else {
    if (active_layer == 0 && active_layer < nl-1){
      //d+=(s[1,0,l]-s[-1,0,l])/(2.*Delta);
      d-=((h[0,0,l+1]*(3.*h[0,0,l]+2.*h[0,0,l+1])*s[0,0,l]+sq(h[0,0,l])*s[0,0,l+1]-(h[0,0,l]+2.*h[0,0,l+1])*(h[0,0,l]+h[0,0,l+1])*sb[0,0])/(h[0,0,l]*sq(h[0,0,l]+h[0,0,l+1])))
	*  (zl[1,0,l]+h[1,0,l]/2.-zl[-1,0,l]-h[-1,0,l]/2.)/(2.*Delta);
      
      d-=( (h[1,0,l+1]*(3.*h[1,0,l]+2.*h[1,0,l+1])*s[1,0,l]+sq(h[1,0,l])*s[1,0,l+1]-(h[1,0,l]+2.*h[1,0,l+1])*(h[1,0,l]+h[1,0,l+1])*sb[1,0])/(h[1,0,l]*sq(h[1,0,l]+h[1,0,l+1]))
	   -  (h[-1,0,l+1]*(3.*h[-1,0,l]+2.*h[-1,0,l+1])*s[-1,0,l]+sq(h[-1,0,l])*s[-1,0,l+1]-(h[-1,0,l]+2.*h[-1,0,l+1])*(h[-1,0,l]+h[-1,0,l+1])*sb[-1,0])/(h[-1,0,l]*sq(h[-1,0,l]+h[-1,0,l+1])) )
	*   (zl[1,0,l]-2.*zl[0,0,l]+zl[-1,0,l]+h[1,0,l]/2.-h[0,0,l]+h[-1,0,l]/2.)/(4.*Delta);
    }
    else{
      if (active_layer == nl-1 && active_layer > 0){
	//d+=(s[1,0,l]-s[-1,0,l])/(2.*Delta);
	d-=(((h[0,0,l]+2.*h[0,0,l-1])*(h[0,0,l]+h[0,0,l-1])*st[0,0]-h[0,0,l-1]*(3.*h[0,0,l]+2.*h[0,0,l-1])*s[0,0,l]-sq(h[0,0,l])*s[0,0,l-1])/(h[0,0,l]*sq(h[0,0,l]+h[0,0,l-1])))
	  *  (zl[1,0,l]+h[1,0,l]/2.-zl[-1,0,l]-h[-1,0,l]/2.)/(2.*Delta);
	
	d-=( ((h[1,0,l]+2.*h[1,0,l-1])*(h[1,0,l]+h[1,0,l-1])*st[1,0]-h[1,0,l-1]*(3.*h[1,0,l]+2.*h[1,0,l-1])*s[1,0,l]-sq(h[1,0,l])*s[1,0,l-1])/(h[1,0,l]*sq(h[1,0,l]+h[1,0,l-1]))
	     -  ((h[-1,0,l]+2.*h[-1,0,l-1])*(h[-1,0,l]+h[-1,0,l-1])*st[-1,0]-h[-1,0,l-1]*(3.*h[-1,0,l]+2.*h[-1,0,l-1])*s[-1,0,l]-sq(h[-1,0,l])*s[-1,0,l-1])/(h[-1,0,l]*sq(h[-1,0,l]+h[-1,0,l-1])) )
	  *   (zl[1,0,l]-2.*zl[0,0,l]+zl[-1,0,l]+h[1,0,l]/2.-h[0,0,l]+h[-1,0,l]/2.)/(4.*Delta);
      }
      else{
	d-=((st[0,0]-sb[0,0])/h[0,0,l])*(zl[1,0,l]+h[1,0,l]/2.-zl[-1,0,l]-h[-1,0,l]/2.)/(2.*Delta);
	d-=((st[1,0]-sb[1,0])/h[1,0,l]-(st[-1,0]-sb[-1,0])/h[-1,0,l])*(zl[1,0,l]-2.*zl[0,0,l]+zl[-1,0,l]+h[1,0,l]/2.-h[0,0,l]+h[-1,0,l]/2.)/(4.*Delta);
      }
    }
  }
  return d;
}

/**
   First derivative at layer top
*/

double h_1st_derivative_O_2_top_NeumannDirichlet(Point point, scalar s,int active_layer, bool h_relative, scalar zl, scalar dst, scalar sb)
{
  int l = (h_relative ? 0 : active_layer);
  double d=0;
  if (active_layer < nl-1 && active_layer > 0){
    d = ((h[1,0,l+1]*s[1,0,l]+h[1,0,l]*s[1,0,l+1])/(h[1,0,l+1]+h[1,0,l])-(h[-1,0,l+1]*s[-1,0,l]+h[-1,0,l]*s[-1,0,l+1])/(h[-1,0,l+1]+h[0,0,l]))/(2.*Delta);
    d-=2.*((2.*h[0,0,l]+h[0,0,l-1])/(h[0,0,l+1]+h[0,0,l]+h[0,0,l-1])*(s[0,0,l+1]-s[0,0,l])/(h[0,0,l+1]+h[0,0,l])
	   +(h[0,0,l+1]-h[0,0,l])/(h[0,0,l+1]+h[0,0,l]+h[0,0,l-1])*(s[0,0,l]-s[0,0,l-1])/(h[0,0,l]+h[0,0,l-1]))   *   (zl[1,0,l]+h[1,0,l]-zl[-1,0,l]-h[-1,0,l])/(2.*Delta);
    
    d-=(2.*((2.*h[1,0,l]+h[1,0,l-1])/(h[1,0,l+1]+h[1,0,l]+h[1,0,l-1])*(s[1,0,l+1]-s[1,0,l])/(h[1,0,l+1]+h[1,0,l])
	    +(h[1,0,l+1]-h[1,0,l])/(h[1,0,l+1]+h[1,0,l]+h[1,0,l-1])*(s[1,0,l]-s[1,0,l-1])/(h[1,0,l]+h[1,0,l-1]))
	-2.*((2.*h[-1,0,l]+h[-1,0,l-1])/(h[-1,0,l+1]+h[-1,0,l]+h[-1,0,l-1])*(s[-1,0,l+1]-s[-1,0,l])/(h[-1,0,l+1]+h[-1,0,l])
	     +(h[-1,0,l+1]-h[-1,0,l])/(h[-1,0,l+1]+h[-1,0,l]+h[-1,0,l-1])*(s[-1,0,l]-s[-1,0,l-1])/(h[-1,0,l]+h[-1,0,l-1])))   *   (zl[1,0,l]-2.*zl[0,0,l]+zl[-1,0,l]+h[1,0,l]-2.*h[0,0,l]+h[-1,0,l])/(4.*Delta);
  }
  else {
    if (active_layer == 0 && active_layer < nl-1){
      d = ( ((h[1,0,l+1]*(3.*h[1,0,l]+2.*h[1,0,l+1])*s[1,0,l]+sq(h[1,0,l])*s[1,0,l+1]-h[1,0,l+1]*(h[1,0,l]+h[1,0,l+1])*sb[1,0])/sq(h[1,0,l]+h[1,0,l+1])) 
	    -((h[-1,0,l+1]*(3.*h[-1,0,l]+2.*h[-1,0,l+1])*s[-1,0,l]+sq(h[-1,0,l])*s[-1,0,l+1]-h[-1,0,l+1]*(h[-1,0,l]+h[-1,0,l+1])*sb[-1,0])/sq(h[-1,0,l]+h[-1,0,l+1])))/(2.*Delta);
      
      d -= ( 2.*((sq(h[0,0,l+1])-3.*sq(h[0,0,l]))*s[0,0,l]+2.*sq(h[0,0,l])*s[0,0,l+1]-(sq(h[0,0,l+1])-sq(h[0,0,l]))*sb[0,0])/(h[0,0,l]*sq(h[0,0,l]+h[0,0,l+1])) )
	*   (zl[1,0,l]+h[1,0,l]-zl[-1,0,l]-h[-1,0,l])/(2.*Delta);
      
      d -=( ( 2.*((sq(h[1,0,l+1])-3.*sq(h[1,0,l]))*s[1,0,l]+2.*sq(h[1,0,l])*s[1,0,l+1]-(sq(h[1,0,l+1])-sq(h[1,0,l]))*sb[1,0])/(h[1,0,l]*sq(h[1,0,l]+h[1,0,l+1])) )
	    -( 2.*((sq(h[-1,0,l+1])-3.*sq(h[-1,0,l]))*s[-1,0,l]+2.*sq(h[-1,0,l])*s[-1,0,l+1]-(sq(h[-1,0,l+1])-sq(h[-1,0,l]))*sb[-1,0])/(h[-1,0,l]*sq(h[-1,0,l]+h[-1,0,l+1])) ) )
	*   (zl[1,0,l]-2.*zl[0,0,l]+zl[-1,0,l]+h[1,0,l]-2.*h[0,0,l]+h[-1,0,l])/(4.*Delta);
    }
    else{
      if (active_layer == nl-1 && active_layer > 0){
	d = ( (((3.*sq(h[1,0,l])+3.*h[1,0,l]*h[1,0,l-1]+sq(h[1,0,l-1]))*s[1,0,l]-sq(h[1,0,l])*s[1,0,l-1])/((h[1,0,l]+h[1,0,l-1])*(2.*h[1,0,l]+h[1,0,l-1]))+(1./2.)*dst[1,0]*h[1,0,l]*(h[1,0,l]+h[1,0,l-1])/(2.*h[1,0,l]+h[1,0,l-1])) -
	      (((3.*sq(h[-1,0,l])+3.*h[-1,0,l]*h[-1,0,l-1]+sq(h[-1,0,l-1]))*s[-1,0,l]-sq(h[-1,0,l])*s[-1,0,l-1])/((h[-1,0,l]+h[-1,0,l-1])*(2.*h[-1,0,l]+h[-1,0,l-1]))+(1./2.)*dst[-1,0]*h[-1,0,l]*(h[-1,0,l]+h[-1,0,l-1])/(2.*h[-1,0,l]+h[-1,0,l-1])) )/(2.*Delta);
	
	d-=dst[0,0]*(zl[1,0,l]+h[1,0,l]-zl[-1,0,l]-h[-1,0,l])/(2.*Delta);
	d-=(dst[1,0]-dst[-1,0])*(zl[1,0,l]-2.*zl[0,0,l]+zl[-1,0,l]+h[1,0,l]-2.*h[0,0,l]+h[-1,0,l])/(4.*Delta);  
      }
      else{
	d = ( ((3.*s[1,0,l]-sb[1,0])/2.+h[1,0,l]*dst[1,0]/4.)-((3.*s[-1,0,l]-sb[-1,0])/2.+h[-1,0,l]*dst[-1,0]/4.) )/(2.*Delta);
	d-=dst[0,0]*(zl[1,0,l]+h[1,0,l]-zl[-1,0,l]-h[-1,0,l])/(2.*Delta);
	d-=(dst[1,0]-dst[-1,0])*(zl[1,0,l]-2.*zl[0,0,l]+zl[-1,0,l]+h[1,0,l]-2.*h[0,0,l]+h[-1,0,l])/(4.*Delta);
        
      }
    }
  }
  return d;
}

double h_1st_derivative_O_2_top_NeumannNeumann(Point point, scalar s,int active_layer, bool h_relative, scalar zl, scalar dst, scalar dsb)
{
  int l = (h_relative ? 0 : active_layer);
  double d=0;
  if (active_layer < nl-1 && active_layer > 0){
    d = ((h[1,0,l+1]*s[1,0,l]+h[1,0,l]*s[1,0,l+1])/(h[1,0,l+1]+h[1,0,l])-(h[-1,0,l+1]*s[-1,0,l]+h[-1,0,l]*s[-1,0,l+1])/(h[-1,0,l+1]+h[0,0,l]))/(2.*Delta);
    d-=2.*((2.*h[0,0,l]+h[0,0,l-1])/(h[0,0,l+1]+h[0,0,l]+h[0,0,l-1])*(s[0,0,l+1]-s[0,0,l])/(h[0,0,l+1]+h[0,0,l])
	   +(h[0,0,l+1]-h[0,0,l])/(h[0,0,l+1]+h[0,0,l]+h[0,0,l-1])*(s[0,0,l]-s[0,0,l-1])/(h[0,0,l]+h[0,0,l-1]))   *   (zl[1,0,l]+h[1,0,l]-zl[-1,0,l]-h[-1,0,l])/(2.*Delta);
    
    d-=(2.*((2.*h[1,0,l]+h[1,0,l-1])/(h[1,0,l+1]+h[1,0,l]+h[1,0,l-1])*(s[1,0,l+1]-s[1,0,l])/(h[1,0,l+1]+h[1,0,l])
	    +(h[1,0,l+1]-h[1,0,l])/(h[1,0,l+1]+h[1,0,l]+h[1,0,l-1])*(s[1,0,l]-s[1,0,l-1])/(h[1,0,l]+h[1,0,l-1]))
	-2.*((2.*h[-1,0,l]+h[-1,0,l-1])/(h[-1,0,l+1]+h[-1,0,l]+h[-1,0,l-1])*(s[-1,0,l+1]-s[-1,0,l])/(h[-1,0,l+1]+h[-1,0,l])
	     +(h[-1,0,l+1]-h[-1,0,l])/(h[-1,0,l+1]+h[-1,0,l]+h[-1,0,l-1])*(s[-1,0,l]-s[-1,0,l-1])/(h[-1,0,l]+h[-1,0,l-1])))   *   (zl[1,0,l]-2.*zl[0,0,l]+zl[-1,0,l]+h[1,0,l]-2.*h[0,0,l]+h[-1,0,l])/(4.*Delta);
  }
  else {
    if (active_layer == 0 && active_layer < nl-1){
      d = ( ((h[1,0,l+1]*(3.*h[1,0,l]+h[1,0,l+1])*s[1,0,l]+2.*sq(h[1,0,l])*s[1,0,l+1])/((h[1,0,l]+h[1,0,l+1])*(2.*h[1,0,l]+h[1,0,l+1]))+(1./2.)*dsb[1,0]*h[1,0,l]*h[1,0,l+1]/(2.*h[1,0,l]+h[1,0,l+1]))
	    - ((h[-1,0,l+1]*(3.*h[-1,0,l]+h[-1,0,l+1])*s[-1,0,l]+2.*sq(h[-1,0,l])*s[-1,0,l+1])/((h[-1,0,l]+h[-1,0,l+1])*(2.*h[-1,0,l]+h[-1,0,l+1]))+(1./2.)*dsb[-1,0]*h[-1,0,l]*h[-1,0,l+1]/(2.*h[-1,0,l]+h[-1,0,l+1])) )/(2.*Delta);
      
      d -= (3.*h[0,0,l]/(2.*h[0,0,l]+h[0,0,l+1])*2.*(s[0,0,l+1]-s[0,0,l])/(h[0,0,l+1]+h[0,0,l])-dsb[0,0]*(h[0,0,l]-h[0,0,l+1])/(2.*h[0,0,l]+h[0,0,l+1]))
	* (zl[1,0,l]+h[1,0,l]-zl[-1,0,l]-h[-1,0,l])/(2.*Delta);
      
      d -= ( (3.*h[1,0,l]/(2.*h[1,0,l]+h[1,0,l+1])*2.*(s[1,0,l+1]-s[1,0,l])/(h[1,0,l+1]+h[1,0,l])-dsb[1,0]*(h[1,0,l]-h[1,0,l+1])/(2.*h[1,0,l]+h[1,0,l+1]))
	     -(3.*h[-1,0,l]/(2.*h[-1,0,l]+h[-1,0,l+1])*2.*(s[-1,0,l+1]-s[-1,0,l])/(h[-1,0,l+1]+h[-1,0,l])-dsb[-1,0]*(h[-1,0,l]-h[-1,0,l+1])/(2.*h[-1,0,l]+h[-1,0,l+1])) )
	*  (zl[1,0,l]-2.*zl[0,0,l]+zl[-1,0,l]+h[1,0,l]-2.*h[0,0,l]+h[-1,0,l])/(4.*Delta);  
    }
    else{
      if (active_layer == nl-1 && active_layer > 0){
	d = ( (((3.*sq(h[1,0,l])+3.*h[1,0,l]*h[1,0,l-1]+sq(h[1,0,l-1]))*s[1,0,l]-sq(h[1,0,l])*s[1,0,l-1])/((h[1,0,l]+h[1,0,l-1])*(2.*h[1,0,l]+h[1,0,l-1]))+(1./2.)*dst[1,0]*h[1,0,l]*(h[1,0,l]+h[1,0,l-1])/(2.*h[1,0,l]+h[1,0,l-1])) -
	      (((3.*sq(h[-1,0,l])+3.*h[-1,0,l]*h[-1,0,l-1]+sq(h[-1,0,l-1]))*s[-1,0,l]-sq(h[-1,0,l])*s[-1,0,l-1])/((h[-1,0,l]+h[-1,0,l-1])*(2.*h[-1,0,l]+h[-1,0,l-1]))+(1./2.)*dst[-1,0]*h[-1,0,l]*(h[-1,0,l]+h[-1,0,l-1])/(2.*h[-1,0,l]+h[-1,0,l-1])) )/(2.*Delta);
	
	d-=dst[0,0]*(zl[1,0,l]+h[1,0,l]-zl[-1,0,l]-h[-1,0,l])/(2.*Delta);
	d-=(dst[1,0]-dst[-1,0])*(zl[1,0,l]-2.*zl[0,0,l]+zl[-1,0,l]+h[1,0,l]-2.*h[0,0,l]+h[-1,0,l])/(4.*Delta);  
      }
      else{
	d = ((s[1,0,l]+h[1,0,l]/6.*(2.*dst[1,0]+dsb[1,0])) -(s[-1,0,l]+h[-1,0,l]/6.*(2.*dst[-1,0]+dsb[-1,0])) )/(2.*Delta);
	d-=dst[0,0]*(zl[1,0,l]+h[1,0,l]-zl[-1,0,l]-h[-1,0,l])/(2.*Delta);
	d-=(dst[1,0]-dst[-1,0])*(zl[1,0,l]-2.*zl[0,0,l]+zl[-1,0,l]+h[1,0,l]-2.*h[0,0,l]+h[-1,0,l])/(4.*Delta);
        
      }
    }
  }
  return d;
}

double h_1st_derivative_O_2_top_DirichletNeumann(Point point, scalar s,int active_layer, bool h_relative, scalar zl, scalar st, scalar dsb)
{
  int l = (h_relative ? 0 : active_layer);
  double d=0;
  if (active_layer < nl-1 && active_layer > 0){
    d = ((h[1,0,l+1]*s[1,0,l]+h[1,0,l]*s[1,0,l+1])/(h[1,0,l+1]+h[1,0,l])-(h[-1,0,l+1]*s[-1,0,l]+h[-1,0,l]*s[-1,0,l+1])/(h[-1,0,l+1]+h[0,0,l]))/(2.*Delta);
    d-=2.*((2.*h[0,0,l]+h[0,0,l-1])/(h[0,0,l+1]+h[0,0,l]+h[0,0,l-1])*(s[0,0,l+1]-s[0,0,l])/(h[0,0,l+1]+h[0,0,l])
	   +(h[0,0,l+1]-h[0,0,l])/(h[0,0,l+1]+h[0,0,l]+h[0,0,l-1])*(s[0,0,l]-s[0,0,l-1])/(h[0,0,l]+h[0,0,l-1]))   *   (zl[1,0,l]+h[1,0,l]-zl[-1,0,l]-h[-1,0,l])/(2.*Delta);
    
    d-=(2.*((2.*h[1,0,l]+h[1,0,l-1])/(h[1,0,l+1]+h[1,0,l]+h[1,0,l-1])*(s[1,0,l+1]-s[1,0,l])/(h[1,0,l+1]+h[1,0,l])
	    +(h[1,0,l+1]-h[1,0,l])/(h[1,0,l+1]+h[1,0,l]+h[1,0,l-1])*(s[1,0,l]-s[1,0,l-1])/(h[1,0,l]+h[1,0,l-1]))
	-2.*((2.*h[-1,0,l]+h[-1,0,l-1])/(h[-1,0,l+1]+h[-1,0,l]+h[-1,0,l-1])*(s[-1,0,l+1]-s[-1,0,l])/(h[-1,0,l+1]+h[-1,0,l])
	     +(h[-1,0,l+1]-h[-1,0,l])/(h[-1,0,l+1]+h[-1,0,l]+h[-1,0,l-1])*(s[-1,0,l]-s[-1,0,l-1])/(h[-1,0,l]+h[-1,0,l-1])))   *   (zl[1,0,l]-2.*zl[0,0,l]+zl[-1,0,l]+h[1,0,l]-2.*h[0,0,l]+h[-1,0,l])/(4.*Delta);
  }
  else {
    if (active_layer == 0 && active_layer < nl-1){
      d = ( ((h[1,0,l+1]*(3.*h[1,0,l]+h[1,0,l+1])*s[1,0,l]+2.*sq(h[1,0,l])*s[1,0,l+1])/((h[1,0,l]+h[1,0,l+1])*(2.*h[1,0,l]+h[1,0,l+1]))+(1./2.)*dsb[1,0]*h[1,0,l]*h[1,0,l+1]/(2.*h[1,0,l]+h[1,0,l+1]))
	    - ((h[-1,0,l+1]*(3.*h[-1,0,l]+h[-1,0,l+1])*s[-1,0,l]+2.*sq(h[-1,0,l])*s[-1,0,l+1])/((h[-1,0,l]+h[-1,0,l+1])*(2.*h[-1,0,l]+h[-1,0,l+1]))+(1./2.)*dsb[-1,0]*h[-1,0,l]*h[-1,0,l+1]/(2.*h[-1,0,l]+h[-1,0,l+1])) )/(2.*Delta);
      
      d -= (3.*h[0,0,l]/(2.*h[0,0,l]+h[0,0,l+1])*2.*(s[0,0,l+1]-s[0,0,l])/(h[0,0,l+1]+h[0,0,l])-dsb[0,0]*(h[0,0,l]-h[0,0,l+1])/(2.*h[0,0,l]+h[0,0,l+1]))
	* (zl[1,0,l]+h[1,0,l]-zl[-1,0,l]-h[-1,0,l])/(2.*Delta);
      
      d -= ( (3.*h[1,0,l]/(2.*h[1,0,l]+h[1,0,l+1])*2.*(s[1,0,l+1]-s[1,0,l])/(h[1,0,l+1]+h[1,0,l])-dsb[1,0]*(h[1,0,l]-h[1,0,l+1])/(2.*h[1,0,l]+h[1,0,l+1]))
	     -(3.*h[-1,0,l]/(2.*h[-1,0,l]+h[-1,0,l+1])*2.*(s[-1,0,l+1]-s[-1,0,l])/(h[-1,0,l+1]+h[-1,0,l])-dsb[-1,0]*(h[-1,0,l]-h[-1,0,l+1])/(2.*h[-1,0,l]+h[-1,0,l+1])) )
	*  (zl[1,0,l]-2.*zl[0,0,l]+zl[-1,0,l]+h[1,0,l]-2.*h[0,0,l]+h[-1,0,l])/(4.*Delta);  
    }
    else{
      if (active_layer == nl-1 && active_layer > 0){
	d = (st[1,0]-st[-1,0])/(2.*Delta);

	d -= ( 2.*((h[0,0,l]+2.*h[0,0,l-1])*(h[0,0,l]+h[0,0,l-1])*st[0,0]-(3.*sq(h[0,0,l])+3.*h[0,0,l]*h[0,0,l-1]+sq(h[0,0,l-1]))*s[0,0,l]+sq(h[0,0,l])*s[0,0,l-1])/(h[0,0,l]*sq(h[0,0,l]+h[0,0,l-1])) )
	  *   (zl[1,0,l]+h[1,0,l]-zl[-1,0,l]-h[-1,0,l])/(2.*Delta);

	d-=( ( 2.*((h[1,0,l]+2.*h[1,0,l-1])*(h[1,0,l]+h[1,0,l-1])*st[1,0]-(3.*sq(h[1,0,l])+3.*h[1,0,l]*h[1,0,l-1]+sq(h[1,0,l-1]))*s[1,0,l]+sq(h[1,0,l])*s[1,0,l-1])/(h[1,0,l]*sq(h[1,0,l]+h[1,0,l-1])) )
	     - ( 2.*((h[-1,0,l]+2.*h[-1,0,l-1])*(h[-1,0,l]+h[-1,0,l-1])*st[-1,0]-(3.*sq(h[-1,0,l])+3.*h[-1,0,l]*h[-1,0,l-1]+sq(h[-1,0,l-1]))*s[-1,0,l]+sq(h[-1,0,l])*s[-1,0,l-1])/(h[-1,0,l]*sq(h[-1,0,l]+h[-1,0,l-1])) ) )
	  *(zl[1,0,l]-2.*zl[0,0,l]+zl[-1,0,l]+h[1,0,l]-2.*h[0,0,l]+h[-1,0,l])/(4.*Delta);
      }
      else{
	d = (st[1,0]-st[-1,0])/(2.*Delta);
	d-=(3.*(st[0,0]-s[0,0,l])/h[0,0,l]-(1./2.)*dsb[0,0])*(zl[1,0,l]+h[1,0,l]-zl[-1,0,l]-h[-1,0,l])/(2.*Delta);
	d-=((3.*(st[1,0]-s[1,0,l])/h[1,0,l]-(1./2.)*dsb[1,0]) - (3.*(st[-1,0]-s[-1,0,l])/h[-1,0,l]-(1./2.)*dsb[-1,0]))*(zl[1,0,l]-2.*zl[0,0,l]+zl[-1,0,l]+h[1,0,l]-2.*h[0,0,l]+h[-1,0,l])/(4.*Delta);
        
      }
    }
  }
  return d;
}

double h_1st_derivative_O_2_top_DirichletDirichlet(Point point, scalar s,int active_layer, bool h_relative, scalar zl, scalar st, scalar sb)
{
  int l = (h_relative ? 0 : active_layer);
  double d=0;
  if (active_layer < nl-1 && active_layer > 0){
    d = ((h[1,0,l+1]*s[1,0,l]+h[1,0,l]*s[1,0,l+1])/(h[1,0,l+1]+h[1,0,l])-(h[-1,0,l+1]*s[-1,0,l]+h[-1,0,l]*s[-1,0,l+1])/(h[-1,0,l+1]+h[0,0,l]))/(2.*Delta);
    d-=2.*((2.*h[0,0,l]+h[0,0,l-1])/(h[0,0,l+1]+h[0,0,l]+h[0,0,l-1])*(s[0,0,l+1]-s[0,0,l])/(h[0,0,l+1]+h[0,0,l])
	   +(h[0,0,l+1]-h[0,0,l])/(h[0,0,l+1]+h[0,0,l]+h[0,0,l-1])*(s[0,0,l]-s[0,0,l-1])/(h[0,0,l]+h[0,0,l-1]))   *   (zl[1,0,l]+h[1,0,l]-zl[-1,0,l]-h[-1,0,l])/(2.*Delta);
    
    d-=(2.*((2.*h[1,0,l]+h[1,0,l-1])/(h[1,0,l+1]+h[1,0,l]+h[1,0,l-1])*(s[1,0,l+1]-s[1,0,l])/(h[1,0,l+1]+h[1,0,l])
	    +(h[1,0,l+1]-h[1,0,l])/(h[1,0,l+1]+h[1,0,l]+h[1,0,l-1])*(s[1,0,l]-s[1,0,l-1])/(h[1,0,l]+h[1,0,l-1]))
	-2.*((2.*h[-1,0,l]+h[-1,0,l-1])/(h[-1,0,l+1]+h[-1,0,l]+h[-1,0,l-1])*(s[-1,0,l+1]-s[-1,0,l])/(h[-1,0,l+1]+h[-1,0,l])
	     +(h[-1,0,l+1]-h[-1,0,l])/(h[-1,0,l+1]+h[-1,0,l]+h[-1,0,l-1])*(s[-1,0,l]-s[-1,0,l-1])/(h[-1,0,l]+h[-1,0,l-1])))   *   (zl[1,0,l]-2.*zl[0,0,l]+zl[-1,0,l]+h[1,0,l]-2.*h[0,0,l]+h[-1,0,l])/(4.*Delta);
  }
  else {
    if (active_layer == 0 && active_layer < nl-1){
      d = ( ((h[1,0,l+1]*(3.*h[1,0,l]+2.*h[1,0,l+1])*s[1,0,l]+sq(h[1,0,l])*s[1,0,l+1]-h[1,0,l+1]*(h[1,0,l]+h[1,0,l+1])*sb[1,0])/sq(h[1,0,l]+h[1,0,l+1])) 
	    -((h[-1,0,l+1]*(3.*h[-1,0,l]+2.*h[-1,0,l+1])*s[-1,0,l]+sq(h[-1,0,l])*s[-1,0,l+1]-h[-1,0,l+1]*(h[-1,0,l]+h[-1,0,l+1])*sb[-1,0])/sq(h[-1,0,l]+h[-1,0,l+1])))/(2.*Delta);
      
      d -= ( 2.*((sq(h[0,0,l+1])-3.*sq(h[0,0,l]))*s[0,0,l]+2.*sq(h[0,0,l])*s[0,0,l+1]-(sq(h[0,0,l+1])-sq(h[0,0,l]))*sb[0,0])/(h[0,0,l]*sq(h[0,0,l]+h[0,0,l+1])) )
	*   (zl[1,0,l]+h[1,0,l]-zl[-1,0,l]-h[-1,0,l])/(2.*Delta);
      
      d -=( ( 2.*((sq(h[1,0,l+1])-3.*sq(h[1,0,l]))*s[1,0,l]+2.*sq(h[1,0,l])*s[1,0,l+1]-(sq(h[1,0,l+1])-sq(h[1,0,l]))*sb[1,0])/(h[1,0,l]*sq(h[1,0,l]+h[1,0,l+1])) )
	    -( 2.*((sq(h[-1,0,l+1])-3.*sq(h[-1,0,l]))*s[-1,0,l]+2.*sq(h[-1,0,l])*s[-1,0,l+1]-(sq(h[-1,0,l+1])-sq(h[-1,0,l]))*sb[-1,0])/(h[-1,0,l]*sq(h[-1,0,l]+h[-1,0,l+1])) ) )
	*   (zl[1,0,l]-2.*zl[0,0,l]+zl[-1,0,l]+h[1,0,l]-2.*h[0,0,l]+h[-1,0,l])/(4.*Delta);
    }
    else{
      if (active_layer == nl-1 && active_layer > 0){
	d = (st[1,0]-st[-1,0])/(2.*Delta);

	d -= ( 2.*((h[0,0,l]+2.*h[0,0,l-1])*(h[0,0,l]+h[0,0,l-1])*st[0,0]-(3.*sq(h[0,0,l])+3.*h[0,0,l]*h[0,0,l-1]+sq(h[0,0,l-1]))*s[0,0,l]+sq(h[0,0,l])*s[0,0,l-1])/(h[0,0,l]*sq(h[0,0,l]+h[0,0,l-1])) )
	  *   (zl[1,0,l]+h[1,0,l]-zl[-1,0,l]-h[-1,0,l])/(2.*Delta);

	d-=( ( 2.*((h[1,0,l]+2.*h[1,0,l-1])*(h[1,0,l]+h[1,0,l-1])*st[1,0]-(3.*sq(h[1,0,l])+3.*h[1,0,l]*h[1,0,l-1]+sq(h[1,0,l-1]))*s[1,0,l]+sq(h[1,0,l])*s[1,0,l-1])/(h[1,0,l]*sq(h[1,0,l]+h[1,0,l-1])) )
	     - ( 2.*((h[-1,0,l]+2.*h[-1,0,l-1])*(h[-1,0,l]+h[-1,0,l-1])*st[-1,0]-(3.*sq(h[-1,0,l])+3.*h[-1,0,l]*h[-1,0,l-1]+sq(h[-1,0,l-1]))*s[-1,0,l]+sq(h[-1,0,l])*s[-1,0,l-1])/(h[-1,0,l]*sq(h[-1,0,l]+h[-1,0,l-1])) ) )
	  *(zl[1,0,l]-2.*zl[0,0,l]+zl[-1,0,l]+h[1,0,l]-2.*h[0,0,l]+h[-1,0,l])/(4.*Delta);
      }
      else{
	d = (st[1,0]-st[-1,0])/(2.*Delta);
	d-=((4.*st[0,0]+2.*sb[0,0]-6.*s[0,0,l])/h[0,0,l])*(zl[1,0,l]+h[1,0,l]-zl[-1,0,l]-h[-1,0,l])/(2.*Delta);
	d-=((4.*st[1,0]+2.*sb[1,0]-6.*s[1,0,l])/h[1,0,l] - (4.*st[-1,0]+2.*sb[-1,0]-6.*s[-1,0,l])/h[-1,0,l])*(zl[1,0,l]-2.*zl[0,0,l]+zl[-1,0,l]+h[1,0,l]-2.*h[0,0,l]+h[-1,0,l])/(4.*Delta);
        
      }
    }
  }
  return d;
}


/**
   First Derivative at layer bottom
*/

double h_1st_derivative_O_2_bottom_DirichletNeumann(Point point, scalar s,int active_layer, bool h_relative, scalar zl, scalar st, scalar dsb)
{
  int l = (h_relative ? 0 : active_layer);
  double d=0;
  if (active_layer < nl-1 && active_layer > 0){
    d = ((h[1,0,l-1]*s[1,0,l]+h[1,0,l]*s[1,0,l-1])/(h[1,0,l]+h[1,0,l-1])-(h[-1,0,l-1]*s[-1,0,l]+h[-1,0,l]*s[-1,0,l-1])/(h[-1,0,l]+h[0,0,l-1]))/(2.*Delta);
    d-=2.*((h[0,0,l-1]-h[0,0,l])/(h[0,0,l+1]+h[0,0,l]+h[0,0,l-1])*(s[0,0,l+1]-s[0,0,l])/(h[0,0,l+1]+h[0,0,l])
	   +(h[0,0,l+1]+2.*h[0,0,l])/(h[0,0,l+1]+h[0,0,l]+h[0,0,l-1])*(s[0,0,l]-s[0,0,l-1])/(h[0,0,l]+h[0,0,l-1]))   *   (zl[1,0,l]-zl[-1,0,l])/(2.*Delta);
    
    d-=(2.*((h[1,0,l-1]-h[1,0,l])/(h[1,0,l+1]+h[1,0,l]+h[1,0,l-1])*(s[1,0,l+1]-s[1,0,l])/(h[1,0,l+1]+h[1,0,l])
	    +(h[1,0,l+1]+2.*h[1,0,l])/(h[1,0,l+1]+h[1,0,l]+h[1,0,l-1])*(s[1,0,l]-s[1,0,l-1])/(h[1,0,l]+h[1,0,l-1]))
	-2.*((h[-1,0,l-1]-h[-1,0,l])/(h[-1,0,l+1]+h[-1,0,l]+h[-1,0,l-1])*(s[-1,0,l+1]-s[-1,0,l])/(h[-1,0,l+1]+h[-1,0,l])
	     +(h[-1,0,l+1]+2.*h[-1,0,l])/(h[-1,0,l+1]+h[-1,0,l]+h[-1,0,l-1])*(s[-1,0,l]-s[-1,0,l-1])/(h[-1,0,l]+h[-1,0,l-1])))   *   (zl[1,0,l]-2.*zl[0,0,l]+zl[-1,0,l])/(4.*Delta);
  }
  else {
    if (active_layer == 0 && active_layer < nl-1){
      d = ( (((3.*sq(h[1,0,l])+3.*h[1,0,l]*h[1,0,l+1]+sq(h[1,0,l+1]))*s[1,0,l]-sq(h[1,0,l])*s[1,0,l+1])/((h[1,0,l]+h[1,0,l+1])*(2.*h[1,0,l]+h[1,0,l+1]))-(1./2.)*dsb[1,0]*h[1,0,l]*(h[1,0,l]+h[1,0,l+1])/(2.*h[1,0,l]+h[1,0,l+1])) -
      	    (((3.*sq(h[-1,0,l])+3.*h[-1,0,l]*h[-1,0,l+1]+sq(h[-1,0,l+1]))*s[-1,0,l]-sq(h[-1,0,l])*s[-1,0,l+1])/((h[-1,0,l]+h[-1,0,l+1])*(2.*h[-1,0,l]+h[-1,0,l+1]))-(1./2.)*dsb[-1,0]*h[-1,0,l]*(h[-1,0,l]+h[-1,0,l+1])/(2.*h[-1,0,l]+h[-1,0,l+1])) )/(2.*Delta);

      d-=dsb[0,0]*(zl[1,0,l]-zl[-1,0,l])/(2.*Delta);
      d-=(dsb[1,0]-dsb[-1,0])*(zl[1,0,l]-2.*zl[0,0,l]+zl[-1,0,l])/(4.*Delta);
    }
    else{
      if (active_layer == nl-1 && active_layer > 0){
	d = ( ((h[1,0,l-1]*(3.*h[1,0,l]+2.*h[1,0,l-1])*s[1,0,l]+sq(h[1,0,l])*s[1,0,l-1]-h[1,0,l-1]*(h[1,0,l]+h[1,0,l-1])*st[1,0])/sq(h[1,0,l]+h[1,0,l-1])) 
	      -((h[-1,0,l-1]*(3.*h[-1,0,l]+2.*h[-1,0,l-1])*s[-1,0,l]+sq(h[-1,0,l])*s[-1,0,l-1]-h[-1,0,l-1]*(h[-1,0,l]+h[-1,0,l-1])*st[-1,0])/sq(h[-1,0,l]+h[-1,0,l-1])))/(2.*Delta);
      
	d -= ( 2.*((3.*sq(h[0,0,l])-sq(h[0,0,l-1]))*s[0,0,l]-2.*sq(h[0,0,l])*s[0,0,l-1]+(sq(h[0,0,l-1])-sq(h[0,0,l]))*st[0,0])/(h[0,0,l]*sq(h[0,0,l]+h[0,0,l-1])) )
	  *   (zl[1,0,l]-zl[-1,0,l])/(2.*Delta);
      
	d -=( ( 2.*((3.*sq(h[1,0,l])-sq(h[1,0,l-1]))*s[1,0,l]-2.*sq(h[1,0,l])*s[1,0,l-1]+(sq(h[1,0,l-1])-sq(h[1,0,l]))*st[1,0])/(h[1,0,l]*sq(h[1,0,l]+h[1,0,l-1])) )
	      -( 2.*((3.*sq(h[-1,0,l])-sq(h[-1,0,l-1]))*s[-1,0,l]-2.*sq(h[-1,0,l])*s[-1,0,l-1]+(sq(h[-1,0,l-1])-sq(h[-1,0,l]))*st[-1,0])/(h[-1,0,l]*sq(h[-1,0,l]+h[-1,0,l-1])) ) )
	  *   (zl[1,0,l]-2.*zl[0,0,l]+zl[-1,0,l])/(4.*Delta);
      }
      else{
	d = ( ((3.*s[1,0,l]-st[1,0])/2.-h[1,0,l]*dsb[1,0]/4.) - ((3.*s[-1,0,l]-st[-1,0])/2.-h[-1,0,l]*dsb[-1,0]/4.))/(2.*Delta);
	d-=dsb[0,0]*(zl[1,0,l]-zl[-1,0,l])/(2.*Delta);
	d-=(dsb[1,0]-dsb[-1,0])*(zl[1,0,l]-2.*zl[0,0,l]+zl[-1,0,l])/(4.*Delta);
      }
    }
  }
  return d;
}

double h_1st_derivative_O_2_bottom_NeumannNeumann(Point point, scalar s,int active_layer, bool h_relative, scalar zl, scalar dst, scalar dsb)
{
  int l = (h_relative ? 0 : active_layer);
  double d=0;
  if (active_layer < nl-1 && active_layer > 0){
    d = ((h[1,0,l-1]*s[1,0,l]+h[1,0,l]*s[1,0,l-1])/(h[1,0,l]+h[1,0,l-1])-(h[-1,0,l-1]*s[-1,0,l]+h[-1,0,l]*s[-1,0,l-1])/(h[-1,0,l]+h[0,0,l-1]))/(2.*Delta);
    d-=2.*((h[0,0,l-1]-h[0,0,l])/(h[0,0,l+1]+h[0,0,l]+h[0,0,l-1])*(s[0,0,l+1]-s[0,0,l])/(h[0,0,l+1]+h[0,0,l])
	   +(h[0,0,l+1]+2.*h[0,0,l])/(h[0,0,l+1]+h[0,0,l]+h[0,0,l-1])*(s[0,0,l]-s[0,0,l-1])/(h[0,0,l]+h[0,0,l-1]))   *   (zl[1,0,l]-zl[-1,0,l])/(2.*Delta);
    
    d-=(2.*((h[1,0,l-1]-h[1,0,l])/(h[1,0,l+1]+h[1,0,l]+h[1,0,l-1])*(s[1,0,l+1]-s[1,0,l])/(h[1,0,l+1]+h[1,0,l])
	    +(h[1,0,l+1]+2.*h[1,0,l])/(h[1,0,l+1]+h[1,0,l]+h[1,0,l-1])*(s[1,0,l]-s[1,0,l-1])/(h[1,0,l]+h[1,0,l-1]))
	-2.*((h[-1,0,l-1]-h[-1,0,l])/(h[-1,0,l+1]+h[-1,0,l]+h[-1,0,l-1])*(s[-1,0,l+1]-s[-1,0,l])/(h[-1,0,l+1]+h[-1,0,l])
	     +(h[-1,0,l+1]+2.*h[-1,0,l])/(h[-1,0,l+1]+h[-1,0,l]+h[-1,0,l-1])*(s[-1,0,l]-s[-1,0,l-1])/(h[-1,0,l]+h[-1,0,l-1])))   *   (zl[1,0,l]-2.*zl[0,0,l]+zl[-1,0,l])/(4.*Delta);
  }
  else {
    if (active_layer == 0 && active_layer < nl-1){
      d = ( (((3.*sq(h[1,0,l])+3.*h[1,0,l]*h[1,0,l+1]+sq(h[1,0,l+1]))*s[1,0,l]-sq(h[1,0,l])*s[1,0,l+1])/((h[1,0,l]+h[1,0,l+1])*(2.*h[1,0,l]+h[1,0,l+1]))-(1./2.)*dsb[1,0]*h[1,0,l]*(h[1,0,l]+h[1,0,l+1])/(2.*h[1,0,l]+h[1,0,l+1])) -
	    (((3.*sq(h[-1,0,l])+3.*h[-1,0,l]*h[-1,0,l+1]+sq(h[-1,0,l+1]))*s[-1,0,l]-sq(h[-1,0,l])*s[-1,0,l+1])/((h[-1,0,l]+h[-1,0,l+1])*(2.*h[-1,0,l]+h[-1,0,l+1]))-(1./2.)*dsb[-1,0]*h[-1,0,l]*(h[-1,0,l]+h[-1,0,l+1])/(2.*h[-1,0,l]+h[-1,0,l+1])) )/(2.*Delta);

      d-=dsb[0,0]*(zl[1,0,l]-zl[-1,0,l])/(2.*Delta);
      d-=(dsb[1,0]-dsb[-1,0])*(zl[1,0,l]-2.*zl[0,0,l]+zl[-1,0,l])/(4.*Delta);
    }
    else{
      if (active_layer == nl-1 && active_layer > 0){
	d = ( ((h[1,0,l-1]*(3.*h[1,0,l]+h[1,0,l-1])*s[1,0,l]+2.*sq(h[1,0,l])*s[1,0,l-1])/((h[1,0,l]+h[1,0,l-1])*(2.*h[1,0,l]+h[1,0,l-1]))-(1./2.)*dst[1,0]*h[1,0,l]*h[1,0,l-1]/(2.*h[1,0,l]+h[1,0,l-1]))
	      - ((h[-1,0,l-1]*(3.*h[-1,0,l]+h[-1,0,l-1])*s[-1,0,l]+2.*sq(h[-1,0,l])*s[-1,0,l-1])/((h[-1,0,l]+h[-1,0,l-1])*(2.*h[-1,0,l]+h[-1,0,l-1]))-(1./2.)*dst[-1,0]*h[-1,0,l]*h[-1,0,l-1]/(2.*h[-1,0,l]+h[-1,0,l-1])) )/(2.*Delta);
      
	d -= (3.*h[0,0,l]/(2.*h[0,0,l]+h[0,0,l-1])*2.*(s[0,0,l]-s[0,0,l-1])/(h[0,0,l]+h[0,0,l-1])-dst[0,0]*(h[0,0,l]-h[0,0,l-1])/(2.*h[0,0,l]+h[0,0,l-1])) * (zl[1,0,l]-zl[-1,0,l])/(2.*Delta);
      
	d -= ( (3.*h[1,0,l]/(2.*h[1,0,l]+h[1,0,l-1])*2.*(s[1,0,l]-s[0,0,l-1])/(h[1,0,l]+h[1,0,l-1])-dst[1,0]*(h[1,0,l]-h[1,0,l-1])/(2.*h[1,0,l]+h[1,0,l-1]))
	       -(3.*h[-1,0,l]/(2.*h[-1,0,l]+h[-1,0,l-1])*2.*(s[-1,0,l]-s[-1,0,l-1])/(h[-1,0,l]+h[-1,0,l-1])-dst[-1,0]*(h[-1,0,l]-h[-1,0,l-1])/(2.*h[-1,0,l]+h[-1,0,l-1])) )
	  *  (zl[1,0,l]-2.*zl[0,0,l]+zl[-1,0,l])/(4.*Delta);  
      }
      else{
	d = ((s[1,0,l]-h[1,0,l]/6.*(dst[1,0]+2.*dsb[1,0])) - (s[-1,0,l]-h[-1,0,l]/6.*(dst[-1,0]+2.*dsb[-1,0])))/(2.*Delta);
	d-=dsb[0,0]*(zl[1,0,l]-zl[-1,0,l])/(2.*Delta);
	d-=(dsb[1,0]-dsb[-1,0])*(zl[1,0,l]-2.*zl[0,0,l]+zl[-1,0,l])/(4.*Delta);
      }
    }
  }
  return d;
}

double h_1st_derivative_O_2_bottom_NeumannDirichlet(Point point, scalar s,int active_layer, bool h_relative, scalar zl, scalar dst, scalar sb)
{
  int l = (h_relative ? 0 : active_layer);
  double d=0;
  if (active_layer < nl-1 && active_layer > 0){
    d = ((h[1,0,l-1]*s[1,0,l]+h[1,0,l]*s[1,0,l-1])/(h[1,0,l]+h[1,0,l-1])-(h[-1,0,l-1]*s[-1,0,l]+h[-1,0,l]*s[-1,0,l-1])/(h[-1,0,l]+h[0,0,l-1]))/(2.*Delta);
    d-=2.*((h[0,0,l-1]-h[0,0,l])/(h[0,0,l+1]+h[0,0,l]+h[0,0,l-1])*(s[0,0,l+1]-s[0,0,l])/(h[0,0,l+1]+h[0,0,l])
	   +(h[0,0,l+1]+2.*h[0,0,l])/(h[0,0,l+1]+h[0,0,l]+h[0,0,l-1])*(s[0,0,l]-s[0,0,l-1])/(h[0,0,l]+h[0,0,l-1]))   *   (zl[1,0,l]-zl[-1,0,l])/(2.*Delta);
    
    d-=(2.*((h[1,0,l-1]-h[1,0,l])/(h[1,0,l+1]+h[1,0,l]+h[1,0,l-1])*(s[1,0,l+1]-s[1,0,l])/(h[1,0,l+1]+h[1,0,l])
	    +(h[1,0,l+1]+2.*h[1,0,l])/(h[1,0,l+1]+h[1,0,l]+h[1,0,l-1])*(s[1,0,l]-s[1,0,l-1])/(h[1,0,l]+h[1,0,l-1]))
	-2.*((h[-1,0,l-1]-h[-1,0,l])/(h[-1,0,l+1]+h[-1,0,l]+h[-1,0,l-1])*(s[-1,0,l+1]-s[-1,0,l])/(h[-1,0,l+1]+h[-1,0,l])
	     +(h[-1,0,l+1]+2.*h[-1,0,l])/(h[-1,0,l+1]+h[-1,0,l]+h[-1,0,l-1])*(s[-1,0,l]-s[-1,0,l-1])/(h[-1,0,l]+h[-1,0,l-1])))   *   (zl[1,0,l]-2.*zl[0,0,l]+zl[-1,0,l])/(4.*Delta);
  }
  else {
    if (active_layer == 0 && active_layer < nl-1){
      d = (sb[1,0]-sb[-1,0])/(2.*Delta);

      d -= ( 2.*((3.*sq(h[0,0,l])+3.*h[0,0,l]*h[0,0,l+1]+sq(h[0,0,l+1]))*s[0,0,l]-sq(h[0,0,l])*s[0,0,l+1]-(h[0,0,l]+2.*h[0,0,l+1])*(h[0,0,l]+h[0,0,l+1])*sb[0,0])/(h[0,0,l]*sq(h[0,0,l]+h[0,0,l+1])) )
	*  (zl[1,0,l]-zl[-1,0,l])/(2.*Delta);
      
      d -= (( 2.*((3.*sq(h[1,0,l])+3.*h[1,0,l]*h[1,0,l+1]+sq(h[1,0,l+1]))*s[1,0,l]-sq(h[1,0,l])*s[1,0,l+1]-(h[1,0,l]+2.*h[1,0,l+1])*(h[1,0,l]+h[1,0,l+1])*sb[1,0])/(h[1,0,l]*sq(h[1,0,l]+h[1,0,l+1])) )
	    - ( 2.*((3.*sq(h[-1,0,l])+3.*h[-1,0,l]*h[-1,0,l+1]+sq(h[-1,0,l+1]))*s[-1,0,l]-sq(h[-1,0,l])*s[-1,0,l+1]-(h[-1,0,l]+2.*h[-1,0,l+1])*(h[-1,0,l]+h[-1,0,l+1])*sb[-1,0])/(h[-1,0,l]*sq(h[-1,0,l]+h[-1,0,l+1])) ))
	*  (zl[1,0,l]-2.*zl[0,0,l]+zl[-1,0,l])/(4.*Delta);
    }
    else{
      if (active_layer == nl-1 && active_layer > 0){
	d = ( ((h[1,0,l-1]*(3.*h[1,0,l]+h[1,0,l-1])*s[1,0,l]+2.*sq(h[1,0,l])*s[1,0,l-1])/((h[1,0,l]+h[1,0,l-1])*(2.*h[1,0,l]+h[1,0,l-1]))-(1./2.)*dst[1,0]*h[1,0,l]*h[1,0,l-1]/(2.*h[1,0,l]+h[1,0,l-1]))
	      - ((h[-1,0,l-1]*(3.*h[-1,0,l]+h[-1,0,l-1])*s[-1,0,l]+2.*sq(h[-1,0,l])*s[-1,0,l-1])/((h[-1,0,l]+h[-1,0,l-1])*(2.*h[-1,0,l]+h[-1,0,l-1]))-(1./2.)*dst[-1,0]*h[-1,0,l]*h[-1,0,l-1]/(2.*h[-1,0,l]+h[-1,0,l-1])) )/(2.*Delta);
      
	d -= (3.*h[0,0,l]/(2.*h[0,0,l]+h[0,0,l-1])*2.*(s[0,0,l]-s[0,0,l-1])/(h[0,0,l]+h[0,0,l-1])-dst[0,0]*(h[0,0,l]-h[0,0,l-1])/(2.*h[0,0,l]+h[0,0,l-1])) * (zl[1,0,l]-zl[-1,0,l])/(2.*Delta);
      
	d -= ( (3.*h[1,0,l]/(2.*h[1,0,l]+h[1,0,l-1])*2.*(s[1,0,l]-s[0,0,l-1])/(h[1,0,l]+h[1,0,l-1])-dst[1,0]*(h[1,0,l]-h[1,0,l-1])/(2.*h[1,0,l]+h[1,0,l-1]))
	       -(3.*h[-1,0,l]/(2.*h[-1,0,l]+h[-1,0,l-1])*2.*(s[-1,0,l]-s[-1,0,l-1])/(h[-1,0,l]+h[-1,0,l-1])-dst[-1,0]*(h[-1,0,l]-h[-1,0,l-1])/(2.*h[-1,0,l]+h[-1,0,l-1])) )
	  *  (zl[1,0,l]-2.*zl[0,0,l]+zl[-1,0,l])/(4.*Delta);  
      }
      else{
	d = (sb[1,0]-sb[-1,0])/(2.*Delta);
	d-=(3.*(s[0,0,l]-sb[0,0])/h[0,0,l]-(1./2.)*dst[0,0])*(zl[1,0,l]-zl[-1,0,l])/(2.*Delta);
	d-=((3.*(s[1,0,l]-sb[1,0])/h[1,0,l]-(1./2.)*dst[1,0]) - (3.*(s[-1,0,l]-sb[-1,0])/h[-1,0,l]-(1./2.)*dst[-1,0]))*(zl[1,0,l]-2.*zl[0,0,l]+zl[-1,0,l])/(4.*Delta);
      }
    }
  }
  return d;
}

double h_1st_derivative_O_2_bottom_DirichletDirichlet(Point point, scalar s,int active_layer, bool h_relative, scalar zl, scalar st, scalar sb)
{
  int l = (h_relative ? 0 : active_layer);
  double d=0;
  if (active_layer < nl-1 && active_layer > 0){
    d = ((h[1,0,l-1]*s[1,0,l]+h[1,0,l]*s[1,0,l-1])/(h[1,0,l]+h[1,0,l-1])-(h[-1,0,l-1]*s[-1,0,l]+h[-1,0,l]*s[-1,0,l-1])/(h[-1,0,l]+h[0,0,l-1]))/(2.*Delta);
    d-=2.*((h[0,0,l-1]-h[0,0,l])/(h[0,0,l+1]+h[0,0,l]+h[0,0,l-1])*(s[0,0,l+1]-s[0,0,l])/(h[0,0,l+1]+h[0,0,l])
	   +(h[0,0,l+1]+2.*h[0,0,l])/(h[0,0,l+1]+h[0,0,l]+h[0,0,l-1])*(s[0,0,l]-s[0,0,l-1])/(h[0,0,l]+h[0,0,l-1]))   *   (zl[1,0,l]-zl[-1,0,l])/(2.*Delta);
    
    d-=(2.*((h[1,0,l-1]-h[1,0,l])/(h[1,0,l+1]+h[1,0,l]+h[1,0,l-1])*(s[1,0,l+1]-s[1,0,l])/(h[1,0,l+1]+h[1,0,l])
	    +(h[1,0,l+1]+2.*h[1,0,l])/(h[1,0,l+1]+h[1,0,l]+h[1,0,l-1])*(s[1,0,l]-s[1,0,l-1])/(h[1,0,l]+h[1,0,l-1]))
	-2.*((h[-1,0,l-1]-h[-1,0,l])/(h[-1,0,l+1]+h[-1,0,l]+h[-1,0,l-1])*(s[-1,0,l+1]-s[-1,0,l])/(h[-1,0,l+1]+h[-1,0,l])
	     +(h[-1,0,l+1]+2.*h[-1,0,l])/(h[-1,0,l+1]+h[-1,0,l]+h[-1,0,l-1])*(s[-1,0,l]-s[-1,0,l-1])/(h[-1,0,l]+h[-1,0,l-1])))   *   (zl[1,0,l]-2.*zl[0,0,l]+zl[-1,0,l])/(4.*Delta);
  }
  else {
    if (active_layer == 0 && active_layer < nl-1){
      d = (sb[1,0]-sb[-1,0])/(2.*Delta);

      d -= ( 2.*((3.*sq(h[0,0,l])+3.*h[0,0,l]*h[0,0,l+1]+sq(h[0,0,l+1]))*s[0,0,l]-sq(h[0,0,l])*s[0,0,l+1]-(h[0,0,l]+2.*h[0,0,l+1])*(h[0,0,l]+h[0,0,l+1])*sb[0,0])/(h[0,0,l]*sq(h[0,0,l]+h[0,0,l+1])) )
	*  (zl[1,0,l]-zl[-1,0,l])/(2.*Delta);
      
      d -= (( 2.*((3.*sq(h[1,0,l])+3.*h[1,0,l]*h[1,0,l+1]+sq(h[1,0,l+1]))*s[1,0,l]-sq(h[1,0,l])*s[1,0,l+1]-(h[1,0,l]+2.*h[1,0,l+1])*(h[1,0,l]+h[1,0,l+1])*sb[1,0])/(h[1,0,l]*sq(h[1,0,l]+h[1,0,l+1])) )
	    - ( 2.*((3.*sq(h[-1,0,l])+3.*h[-1,0,l]*h[-1,0,l+1]+sq(h[-1,0,l+1]))*s[-1,0,l]-sq(h[-1,0,l])*s[-1,0,l+1]-(h[-1,0,l]+2.*h[-1,0,l+1])*(h[-1,0,l]+h[-1,0,l+1])*sb[-1,0])/(h[-1,0,l]*sq(h[-1,0,l]+h[-1,0,l+1])) ))
	*  (zl[1,0,l]-2.*zl[0,0,l]+zl[-1,0,l])/(4.*Delta);
    }
    else{
      if (active_layer == nl-1 && active_layer > 0){
	d = ( ((h[1,0,l-1]*(3.*h[1,0,l]+2.*h[1,0,l-1])*s[1,0,l]+sq(h[1,0,l])*s[1,0,l-1]-h[1,0,l-1]*(h[1,0,l]+h[1,0,l-1])*st[1,0])/sq(h[1,0,l]+h[1,0,l-1])) 
	      -((h[-1,0,l-1]*(3.*h[-1,0,l]+2.*h[-1,0,l-1])*s[-1,0,l]+sq(h[-1,0,l])*s[-1,0,l-1]-h[-1,0,l-1]*(h[-1,0,l]+h[-1,0,l-1])*st[-1,0])/sq(h[-1,0,l]+h[-1,0,l-1])))/(2.*Delta);
      
	d -= ( 2.*((3.*sq(h[0,0,l])-sq(h[0,0,l-1]))*s[0,0,l]-2.*sq(h[0,0,l])*s[0,0,l-1]+(sq(h[0,0,l-1])-sq(h[0,0,l]))*st[0,0])/(h[0,0,l]*sq(h[0,0,l]+h[0,0,l-1])) )
	  *   (zl[1,0,l]-zl[-1,0,l])/(2.*Delta);
      
	d -=( ( 2.*((3.*sq(h[1,0,l])-sq(h[1,0,l-1]))*s[1,0,l]-2.*sq(h[1,0,l])*s[1,0,l-1]+(sq(h[1,0,l-1])-sq(h[1,0,l]))*st[1,0])/(h[1,0,l]*sq(h[1,0,l]+h[1,0,l-1])) )
	      -( 2.*((3.*sq(h[-1,0,l])-sq(h[-1,0,l-1]))*s[-1,0,l]-2.*sq(h[-1,0,l])*s[-1,0,l-1]+(sq(h[-1,0,l-1])-sq(h[-1,0,l]))*st[-1,0])/(h[-1,0,l]*sq(h[-1,0,l]+h[-1,0,l-1])) ) )
	  *   (zl[1,0,l]-2.*zl[0,0,l]+zl[-1,0,l])/(4.*Delta);
      }
      else{
	d = (sb[1,0]-sb[-1,0])/(2.*Delta);
	d-=((6.*s[0,0,l]-2.*st[0,0]-4.*sb[0,0])/h[0,0,l])*(zl[1,0,l]-zl[-1,0,l])/(2.*Delta);
	d-=(((6.*s[1,0,l]-2.*st[1,0]-4.*sb[1,0])/h[1,0,l]) - ((6.*s[-1,0,l]-2.*st[-1,0]-4.*sb[-1,0])/h[-1,0,l]))*(zl[1,0,l]-2.*zl[0,0,l]+zl[-1,0,l])/(4.*Delta);
      }
    }
  }
  return d;
}

/**
   Second Derivative with all Bcs
*/


double h_2nd_derivative_O_2_centre_NeumannNeumann(Point point, scalar s,int active_layer, bool h_relative, scalar zl, scalar dst, scalar dsb)
{
  int l = (h_relative ? 0 : active_layer);
  double d = (s[1,0,l]-2.*s[0,0,l]+s[-1,0,l])/(sq(Delta));
  if (active_layer < nl-1 && active_layer > 0){
    //d+=(s[1,0,l]-2.*s[0,0,l]+s[-1,0,l])/(sq(Delta));
    d-=((h[0,0,l]+2.*h[0,0,l-1])*(s[0,0,l+1]-s[0,0,l])/(h[0,0,l+1]+h[0,0,l])+(2.*h[0,0,l+1]+h[0,0,l])*(s[0,0,l]-s[0,0,l-1])/(h[0,0,l]+h[0,0,l-1]))/(h[0,0,l+1]+h[0,0,l]+h[0,0,l-1])
      *(zl[1,0,l]+h[1,0,l]/2.-2.*zl[0,0,l]-h[0,0,l]+zl[-1,0,l]+h[-1,0,l]/2.)/sq(Delta);
    
    d-=(((h[1,0,l]+2.*h[1,0,l-1])*(s[1,0,l+1]-s[1,0,l])/(h[1,0,l+1]+h[1,0,l])+(2.*h[1,0,l+1]+h[1,0,l])*(s[1,0,l]-s[1,0,l-1])/(h[1,0,l]+h[1,0,l-1]))/(h[1,0,l+1]+h[1,0,l]+h[1,0,l-1])
	- ((h[-1,0,l]+2.*h[-1,0,l-1])*(s[-1,0,l+1]-s[-1,0,l])/(h[-1,0,l+1]+h[-1,0,l])+(2.*h[-1,0,l+1]+h[-1,0,l])*(s[-1,0,l]-s[-1,0,l-1])/(h[-1,0,l]+h[-1,0,l-1]))/(h[-1,0,l+1]+h[-1,0,l]+h[-1,0,l-1])   )
      *  (zl[1,0,l]-zl[-1,0,l]+h[1,0,l]/2.-h[-1,0,l]/2.)/(2.*sq(Delta));
      
    d-=( 6.*((s[0,0,l+1]-s[0,0,l])/(h[0,0,l+1]+h[0,0,l])-(s[0,0,l]-s[0,0,l-1])/(h[0,0,l]+h[0,0,l-1]))/(h[0,0,l+1]+h[0,0,l]+h[0,0,l-1]))
      * ((zl[1,0,l]+h[1,0,l]/2.-zl[0,0,l]-h[0,0,l]/2.)*(zl[-1,0,l]+h[-1,0,l]/2.-zl[0,0,l]-h[0,0,l]/2.))/sq(Delta);
  }
  else {
    if (active_layer == 0 && active_layer < nl-1){
      //d+=(s[1,0,l]-2.*s[0,0,l]+s[-1,0,l])/(sq(Delta));
      d-=((s[0,0,l+1]-s[0,0,l])/(h[0,0,l]+h[0,0,l+1])*(3.*h[0,0,l])/(2.*h[0,0,l]+h[0,0,l+1])+(1./2.)*dsb[0,0]*(h[0,0,l]+2.*h[0,0,l+1])/(2.*h[0,0,l]+h[0,0,l+1]))
	*(zl[1,0,l]+h[1,0,l]/2.-2.*zl[0,0,l]-h[0,0,l]+zl[-1,0,l]+h[-1,0,l]/2.)/sq(Delta);
    
      d-=((s[1,0,l+1]-s[1,0,l])/(h[1,0,l]+h[1,0,l+1])*(3.*h[1,0,l])/(2.*h[1,0,l]+h[1,0,l+1])+(1./2.)*dsb[1,0]*(h[1,0,l]+2.*h[1,0,l+1])/(2.*h[1,0,l]+h[1,0,l+1])
	  - (s[-1,0,l+1]-s[-1,0,l])/(h[-1,0,l]+h[-1,0,l+1])*(3.*h[-1,0,l])/(2.*h[-1,0,l]+h[-1,0,l+1])+(1./2.)*dsb[-1,0]*(h[-1,0,l]+2.*h[-1,0,l+1])/(2.*h[-1,0,l]+h[-1,0,l+1]))
	*  (zl[1,0,l]-zl[-1,0,l]+h[1,0,l]/2.-h[-1,0,l]/2.)/(2.*sq(Delta));
      
      d-=( 3./(2.*h[0,0,l]+h[0,0,l+1])*(2.*(s[0,0,l+1]-s[0,0,l])/(h[0,0,l+1]+h[0,0,l])-dsb[0,0]))
	* ((zl[1,0,l]+h[1,0,l]/2.-zl[0,0,l]-h[0,0,l]/2.)*(zl[-1,0,l]+h[-1,0,l]/2.-zl[0,0,l]-h[0,0,l]/2.))/sq(Delta);
    }
    else{
      if (active_layer == nl-1 && active_layer > 0){
	//d+=(s[1,0,l]-2.*s[0,0,l]+s[-1,0,l])/(sq(Delta));
	d-=((s[0,0,l]-s[0,0,l-1])/(h[0,0,l]+h[0,0,l-1])*(3.*h[0,0,l])/(2.*h[0,0,l]+h[0,0,l-1])+(1./2.)*dst[0,0]*(h[0,0,l]+2.*h[0,0,l-1])/(2.*h[0,0,l]+h[0,0,l-1]))
	  *(zl[1,0,l]+h[1,0,l]/2.-2.*zl[0,0,l]-h[0,0,l]+zl[-1,0,l]+h[-1,0,l]/2.)/sq(Delta);
    
	d-=(((s[1,0,l]-s[1,0,l-1])/(h[1,0,l]+h[1,0,l-1])*(3.*h[1,0,l])/(2.*h[1,0,l]+h[1,0,l-1])+(1./2.)*dst[1,0]*(h[1,0,l]+2.*h[1,0,l-1])/(2.*h[1,0,l]+h[1,0,l-1]))
	    - ((s[-1,0,l]-s[-1,0,l-1])/(h[-1,0,l]+h[-1,0,l-1])*(3.*h[-1,0,l])/(2.*h[-1,0,l]+h[-1,0,l-1])+(1./2.)*dst[-1,0]*(h[-1,0,l]+2.*h[-1,0,l-1])/(2.*h[-1,0,l]+h[-1,0,l-1])))
	 *  (zl[1,0,l]-zl[-1,0,l]+h[1,0,l]/2.-h[-1,0,l]/2.)/(2.*sq(Delta));
      
	d-=( 3./(2.*h[0,0,l]+h[0,0,l-1])*(dst[0,0]-2.*(s[0,0,l]-s[0,0,l-1])/(h[0,0,l]+h[0,0,l-1])))
	  * ((zl[1,0,l]+h[1,0,l]/2.-zl[0,0,l]-h[0,0,l]/2.)*(zl[-1,0,l]+h[-1,0,l]/2.-zl[0,0,l]-h[0,0,l]/2.))/sq(Delta);
      }
      else{
	//d+=(s[1,0,l]-2.*s[0,0,l]+s[-1,0,l])/(sq(Delta));
	d-=(1./2.)*(dst[0,0]+dsb[0,0]) * (zl[1,0,l]+h[1,0,l]/2.-2.*zl[0,0,l]-h[0,0,l]+zl[-1,0,l]+h[-1,0,l]/2.)/sq(Delta);
	d-=((1./2.)*(dst[1,0]+dsb[1,0])-(1./2.)*(dst[-1,0]+dsb[-1,0])) * (zl[1,0,l]-zl[-1,0,l]+h[1,0,l]/2.-h[-1,0,l]/2.)/(2.*sq(Delta));
	d-=((dst[0,0]-dsb[0,0])/h[0,0,l]) * ((zl[1,0,l]+h[1,0,l]/2.-zl[0,0,l]-h[0,0,l]/2.)*(zl[-1,0,l]+h[-1,0,l]/2.-zl[0,0,l]-h[0,0,l]/2.))/sq(Delta);
      }
    }
  } 
  return d;
}


double h_2nd_derivative_O_2_centre_DirichletNeumann(Point point, scalar s,int active_layer, bool h_relative, scalar zl, scalar st, scalar dsb)
{
  int l = (h_relative ? 0 : active_layer);
  double d = (s[1,0,l]-2.*s[0,0,l]+s[-1,0,l])/(sq(Delta));
  if (active_layer < nl-1 && active_layer > 0){
    //d+=(s[1,0,l]-2.*s[0,0,l]+s[-1,0,l])/(sq(Delta));
    d-=((h[0,0,l]+2.*h[0,0,l-1])*(s[0,0,l+1]-s[0,0,l])/(h[0,0,l+1]+h[0,0,l])+(2.*h[0,0,l+1]+h[0,0,l])*(s[0,0,l]-s[0,0,l-1])/(h[0,0,l]+h[0,0,l-1]))/(h[0,0,l+1]+h[0,0,l]+h[0,0,l-1])
      *(zl[1,0,l]+h[1,0,l]/2.-2.*zl[0,0,l]-h[0,0,l]+zl[-1,0,l]+h[-1,0,l]/2.)/sq(Delta);
    
    d-=(((h[1,0,l]+2.*h[1,0,l-1])*(s[1,0,l+1]-s[1,0,l])/(h[1,0,l+1]+h[1,0,l])+(2.*h[1,0,l+1]+h[1,0,l])*(s[1,0,l]-s[1,0,l-1])/(h[1,0,l]+h[1,0,l-1]))/(h[1,0,l+1]+h[1,0,l]+h[1,0,l-1])
    	- ((h[-1,0,l]+2.*h[-1,0,l-1])*(s[-1,0,l+1]-s[-1,0,l])/(h[-1,0,l+1]+h[-1,0,l])+(2.*h[-1,0,l+1]+h[-1,0,l])*(s[-1,0,l]-s[-1,0,l-1])/(h[-1,0,l]+h[-1,0,l-1]))/(h[-1,0,l+1]+h[-1,0,l]+h[-1,0,l-1])   )
      *  (zl[1,0,l]-zl[-1,0,l]+h[1,0,l]/2.-h[-1,0,l]/2.)/(2.*sq(Delta));
      
    d-=( 6.*((s[0,0,l+1]-s[0,0,l])/(h[0,0,l+1]+h[0,0,l])-(s[0,0,l]-s[0,0,l-1])/(h[0,0,l]+h[0,0,l-1]))/(h[0,0,l+1]+h[0,0,l]+h[0,0,l-1]))
      * ((zl[1,0,l]+h[1,0,l]/2.-zl[0,0,l]-h[0,0,l]/2.)*(zl[-1,0,l]+h[-1,0,l]/2.-zl[0,0,l]-h[0,0,l]/2.))/sq(Delta);

     //d-=(s[0,0,l+1]-s[0,0,l-1])*(zl[1,0,l]+h[1,0,l]/2.-2.*zl[0,0,l]-h[0,0,l]+zl[-1,0,l]+h[-1,0,l]/2.)/(2.*h[0,0,l]*sq(Delta));
     // d-=((s[1,0,l+1]-s[1,0,l-1])/(2.*h[1,0,l])-(s[-1,0,l+1]-s[-1,0,l-1])/(2.*h[-1,0,l]))*(zl[1,0,l]-zl[-1,0,l]+h[1,0,l]/2.-h[-1,0,l]/2.)/(2.*sq(Delta));  
     //d-=(s[0,0,l+1]-2.*s[0,0,l]+s[0,0,l-1])*((zl[1,0,l]+h[1,0,l]/2.-zl[0,0,l]-h[0,0,l]/2.)*(zl[-1,0,l]+h[-1,0,l]/2.-zl[0,0,l]-h[0,0,l]/2.))/(sq(h[0,0,l])*sq(Delta));
  }
  else {
    if (active_layer == 0 && active_layer < nl-1){
      //d+=(s[1,0,l]-2.*s[0,0,l]+s[-1,0,l])/(sq(Delta));
      d-=((s[0,0,l+1]-s[0,0,l])/(h[0,0,l]+h[0,0,l+1])*(3.*h[0,0,l])/(2.*h[0,0,l]+h[0,0,l+1])+(1./2.)*dsb[0,0]*(h[0,0,l]+2.*h[0,0,l+1])/(2.*h[0,0,l]+h[0,0,l+1]))
	*(zl[1,0,l]+h[1,0,l]/2.-2.*zl[0,0,l]-h[0,0,l]+zl[-1,0,l]+h[-1,0,l]/2.)/sq(Delta);
    
      d-=((s[1,0,l+1]-s[1,0,l])/(h[1,0,l]+h[1,0,l+1])*(3.*h[1,0,l])/(2.*h[1,0,l]+h[1,0,l+1])+(1./2.)*dsb[1,0]*(h[1,0,l]+2.*h[1,0,l+1])/(2.*h[1,0,l]+h[1,0,l+1])
	  - (s[-1,0,l+1]-s[-1,0,l])/(h[-1,0,l]+h[-1,0,l+1])*(3.*h[-1,0,l])/(2.*h[-1,0,l]+h[-1,0,l+1])+(1./2.)*dsb[-1,0]*(h[-1,0,l]+2.*h[-1,0,l+1])/(2.*h[-1,0,l]+h[-1,0,l+1]))
	*  (zl[1,0,l]-zl[-1,0,l]+h[1,0,l]/2.-h[-1,0,l]/2.)/(2.*sq(Delta));
      
      d-=( 3./(2.*h[0,0,l]+h[0,0,l+1])*(2.*(s[0,0,l+1]-s[0,0,l])/(h[0,0,l+1]+h[0,0,l])-dsb[0,0]))
	* ((zl[1,0,l]+h[1,0,l]/2.-zl[0,0,l]-h[0,0,l]/2.)*(zl[-1,0,l]+h[-1,0,l]/2.-zl[0,0,l]-h[0,0,l]/2.))/sq(Delta);
    }
    else{
      if (active_layer == nl-1 && active_layer > 0){
	//d+=(s[1,0,l]-2.*s[0,0,l]+s[-1,0,l])/(sq(Delta));
	d-=(((h[0,0,l]+2.*h[0,0,l-1])*(h[0,0,l]+h[0,0,l-1])*st[0,0]-h[0,0,l-1]*(3.*h[0,0,l]+2.*h[0,0,l-1])*s[0,0,l]-sq(h[0,0,l])*s[0,0,l-1])/(h[0,0,l]*sq(h[0,0,l]+h[0,0,l-1])))
	  *(zl[1,0,l]+h[1,0,l]/2.-2.*zl[0,0,l]-h[0,0,l]+zl[-1,0,l]+h[-1,0,l]/2.)/sq(Delta);
    
	d-=(((h[1,0,l]+2.*h[1,0,l-1])*(h[1,0,l]+h[1,0,l-1])*st[1,0]-h[1,0,l-1]*(3.*h[1,0,l]+2.*h[1,0,l-1])*s[1,0,l]-sq(h[1,0,l])*s[1,0,l-1])/(h[1,0,l]*sq(h[1,0,l]+h[1,0,l-1]))
	    - ((h[-1,0,l]+2.*h[-1,0,l-1])*(h[-1,0,l]+h[-1,0,l-1])*st[-1,0]-h[-1,0,l-1]*(3.*h[-1,0,l]+2.*h[-1,0,l-1])*s[-1,0,l]-sq(h[-1,0,l])*s[-1,0,l-1])/(h[-1,0,l]*sq(h[-1,0,l]+h[-1,0,l-1])))
	  *  (zl[1,0,l]-zl[-1,0,l]+h[1,0,l]/2.-h[-1,0,l]/2.)/(2.*sq(Delta));
      
	d-=( 6.*((h[0,0,l]+h[0,0,l-1])*st[0,0]-(2.*h[0,0,l]+h[0,0,l-1])*s[0,0,l]+h[0,0,l]*s[0,0,l-1])/(h[0,0,l]*sq(h[0,0,l]+h[0,0,l-1])))
	  * ((zl[1,0,l]+h[1,0,l]/2.-zl[0,0,l]-h[0,0,l]/2.)*(zl[-1,0,l]+h[-1,0,l]/2.-zl[0,0,l]-h[0,0,l]/2.))/sq(Delta);
      }
      else{
	//d+=(s[1,0,l]-2.*s[0,0,l]+s[-1,0,l])/(sq(Delta));
	d-=((3./2.)*(st[0,0]-s[0,0,l])/h[0,0,l]+dsb[0,0]/4.) * (zl[1,0,l]+h[1,0,l]/2.-2.*zl[0,0,l]-h[0,0,l]+zl[-1,0,l]+h[-1,0,l]/2.)/sq(Delta);
	d-=(((3./2.)*(st[1,0]-s[1,0,l])/h[1,0,l]+dsb[1,0]/4.)-((3./2.)*(st[-1,0]-s[-1,0,l])/h[-1,0,l]+dsb[-1,0]/4.)) * (zl[1,0,l]-zl[-1,0,l]+h[1,0,l]/2.-h[-1,0,l]/2.)/(2.*sq(Delta));
	d-=(3.*((st[0,0]-s[0,0,l])/h[0,0,l]-(1./2.)*dsb[0,0])/h[0,0,l]) * ((zl[1,0,l]+h[1,0,l]/2.-zl[0,0,l]-h[0,0,l]/2.)*(zl[-1,0,l]+h[-1,0,l]/2.-zl[0,0,l]-h[0,0,l]/2.))/sq(Delta);
      }
    }
  }
  return d;
}

double h_2nd_derivative_O_2_centre_NeumannDirichlet(Point point, scalar s,int active_layer, bool h_relative, scalar zl, scalar dst, scalar sb)
{
  int l = (h_relative ? 0 : active_layer);
  double d = (s[1,0,l]-2.*s[0,0,l]+s[-1,0,l])/(sq(Delta));
  if (active_layer < nl-1 && active_layer > 0){
    //d+=(s[1,0,l]-2.*s[0,0,l]+s[-1,0,l])/(sq(Delta));
    d-=((h[0,0,l]+2.*h[0,0,l-1])*(s[0,0,l+1]-s[0,0,l])/(h[0,0,l+1]+h[0,0,l])+(2.*h[0,0,l+1]+h[0,0,l])*(s[0,0,l]-s[0,0,l-1])/(h[0,0,l]+h[0,0,l-1]))/(h[0,0,l+1]+h[0,0,l]+h[0,0,l-1])
      *(zl[1,0,l]+h[1,0,l]/2.-2.*zl[0,0,l]-h[0,0,l]+zl[-1,0,l]+h[-1,0,l]/2.)/sq(Delta);
    
    d-=(((h[1,0,l]+2.*h[1,0,l-1])*(s[1,0,l+1]-s[1,0,l])/(h[1,0,l+1]+h[1,0,l])+(2.*h[1,0,l+1]+h[1,0,l])*(s[1,0,l]-s[1,0,l-1])/(h[1,0,l]+h[1,0,l-1]))/(h[1,0,l+1]+h[1,0,l]+h[1,0,l-1])
	- ((h[-1,0,l]+2.*h[-1,0,l-1])*(s[-1,0,l+1]-s[-1,0,l])/(h[-1,0,l+1]+h[-1,0,l])+(2.*h[-1,0,l+1]+h[-1,0,l])*(s[-1,0,l]-s[-1,0,l-1])/(h[-1,0,l]+h[-1,0,l-1]))/(h[-1,0,l+1]+h[-1,0,l]+h[-1,0,l-1])   )
      *  (zl[1,0,l]-zl[-1,0,l]+h[1,0,l]/2.-h[-1,0,l]/2.)/(2.*sq(Delta));
      
    d-=( 6.*((s[0,0,l+1]-s[0,0,l])/(h[0,0,l+1]+h[0,0,l])-(s[0,0,l]-s[0,0,l-1])/(h[0,0,l]+h[0,0,l-1]))/(h[0,0,l+1]+h[0,0,l]+h[0,0,l-1]))
      * ((zl[1,0,l]+h[1,0,l]/2.-zl[0,0,l]-h[0,0,l]/2.)*(zl[-1,0,l]+h[-1,0,l]/2.-zl[0,0,l]-h[0,0,l]/2.))/sq(Delta);
  }
  else {
    if (active_layer == 0 && active_layer < nl-1){
      //d+=(s[1,0,l]-2.*s[0,0,l]+s[-1,0,l])/(sq(Delta));
      d-=((h[0,0,l+1]*(3.*h[0,0,l]+2.*h[0,0,l+1])*s[0,0,l]+sq(h[0,0,l])*s[0,0,l+1]-(h[0,0,l]+2.*h[0,0,l+1])*(h[0,0,l]+h[0,0,l+1])*sb[0,0])/(h[0,0,l]*sq(h[0,0,l]+h[0,0,l+1])))
	*(zl[1,0,l]+h[1,0,l]/2.-2.*zl[0,0,l]-h[0,0,l]+zl[-1,0,l]+h[-1,0,l]/2.)/sq(Delta);
    
      d-=(((h[1,0,l+1]*(3.*h[1,0,l]+2.*h[1,0,l+1])*s[1,0,l]+sq(h[1,0,l])*s[1,0,l+1]-(h[1,0,l]+2.*h[1,0,l+1])*(h[1,0,l]+h[1,0,l+1])*sb[1,0])/(h[1,0,l]*sq(h[1,0,l]+h[1,0,l+1])))
	  - ((h[-1,0,l+1]*(3.*h[-1,0,l]+2.*h[-1,0,l+1])*s[-1,0,l]+sq(h[-1,0,l])*s[-1,0,l+1]-(h[-1,0,l]+2.*h[-1,0,l+1])*(h[-1,0,l]+h[-1,0,l+1])*sb[-1,0])/(h[-1,0,l]*sq(h[-1,0,l]+h[-1,0,l+1]))))
	*  (zl[1,0,l]-zl[-1,0,l]+h[1,0,l]/2.-h[-1,0,l]/2.)/(2.*sq(Delta));
      
      d-=( 6.*((h[0,0,l]+h[0,0,l+1])*sb[0,0]-(2.*h[0,0,l]+h[0,0,l+1])*s[0,0,l]+h[0,0,l]*s[0,0,l+1])/(h[0,0,l]*sq(h[0,0,l]+h[0,0,l+1])))
	* ((zl[1,0,l]+h[1,0,l]/2.-zl[0,0,l]-h[0,0,l]/2.)*(zl[-1,0,l]+h[-1,0,l]/2.-zl[0,0,l]-h[0,0,l]/2.))/sq(Delta);
    }
    else{
      if (active_layer == nl-1 && active_layer > 0){
	//d+=(s[1,0,l]-2.*s[0,0,l]+s[-1,0,l])/(sq(Delta));
	d-=((s[0,0,l]-s[0,0,l-1])/(h[0,0,l]+h[0,0,l-1])*(3.*h[0,0,l])/(2.*h[0,0,l]+h[0,0,l-1])+(1./2.)*dst[0,0]*(h[0,0,l]+2.*h[0,0,l-1])/(2.*h[0,0,l]+h[0,0,l-1]))
	  *(zl[1,0,l]+h[1,0,l]/2.-2.*zl[0,0,l]-h[0,0,l]+zl[-1,0,l]+h[-1,0,l]/2.)/sq(Delta);
    
	d-=(((s[1,0,l]-s[1,0,l-1])/(h[1,0,l]+h[1,0,l-1])*(3.*h[1,0,l])/(2.*h[1,0,l]+h[1,0,l-1])+(1./2.)*dst[1,0]*(h[1,0,l]+2.*h[1,0,l-1])/(2.*h[1,0,l]+h[1,0,l-1]))
	    - ((s[-1,0,l]-s[-1,0,l-1])/(h[-1,0,l]+h[-1,0,l-1])*(3.*h[-1,0,l])/(2.*h[-1,0,l]+h[-1,0,l-1])+(1./2.)*dst[-1,0]*(h[-1,0,l]+2.*h[-1,0,l-1])/(2.*h[-1,0,l]+h[-1,0,l-1])))
	  *  (zl[1,0,l]-zl[-1,0,l]+h[1,0,l]/2.-h[-1,0,l]/2.)/(2.*sq(Delta));
      
	d-=( 3./(2.*h[0,0,l]+h[0,0,l-1])*(dst[0,0]-2.*(s[0,0,l]-s[0,0,l-1])/(h[0,0,l]+h[0,0,l-1])))
	  * ((zl[1,0,l]+h[1,0,l]/2.-zl[0,0,l]-h[0,0,l]/2.)*(zl[-1,0,l]+h[-1,0,l]/2.-zl[0,0,l]-h[0,0,l]/2.))/sq(Delta);
      }
      else{
	//d+=(s[1,0,l]-2.*s[0,0,l]+s[-1,0,l])/(sq(Delta));
	d-=(dst[0,0]/4.+(3./2.)*(s[0,0,l]-sb[0,0])/h[0,0,l]) * (zl[1,0,l]+h[1,0,l]/2.-2.*zl[0,0,l]-h[0,0,l]+zl[-1,0,l]+h[-1,0,l]/2.)/sq(Delta);
	d-=((dst[1,0]/4.+(3./2.)*(s[1,0,l]-sb[1,0])/h[1,0,l])-(dst[-1,0]/4.+(3./2.)*(s[-1,0,l]-sb[-1,0])/h[-1,0,l])) * (zl[1,0,l]-zl[-1,0,l]+h[1,0,l]/2.-h[-1,0,l]/2.)/(2.*sq(Delta));
	d-=(3.*((1./2.)*dst[0,0]-(s[0,0,l]-sb[0,0])/h[0,0,l])/h[0,0,l]) * ((zl[1,0,l]+h[1,0,l]/2.-zl[0,0,l]-h[0,0,l]/2.)*(zl[-1,0,l]+h[-1,0,l]/2.-zl[0,0,l]-h[0,0,l]/2.))/sq(Delta);
      }
    }
  }
  return d;
}

double h_2nd_derivative_O_2_centre_DirichletDirichlet(Point point, scalar s,int active_layer, bool h_relative, scalar zl, scalar st, scalar sb)
{
  int l = (h_relative ? 0 : active_layer);
  double d = (s[1,0,l]-2.*s[0,0,l]+s[-1,0,l])/(sq(Delta));
  if (active_layer < nl-1 && active_layer > 0){
    //d+=(s[1,0,l]-2.*s[0,0,l]+s[-1,0,l])/(sq(Delta));
    d-=((h[0,0,l]+2.*h[0,0,l-1])*(s[0,0,l+1]-s[0,0,l])/(h[0,0,l+1]+h[0,0,l])+(2.*h[0,0,l+1]+h[0,0,l])*(s[0,0,l]-s[0,0,l-1])/(h[0,0,l]+h[0,0,l-1]))/(h[0,0,l+1]+h[0,0,l]+h[0,0,l-1])
      *(zl[1,0,l]+h[1,0,l]/2.-2.*zl[0,0,l]-h[0,0,l]+zl[-1,0,l]+h[-1,0,l]/2.)/sq(Delta);
    
    d-=(((h[1,0,l]+2.*h[1,0,l-1])*(s[1,0,l+1]-s[1,0,l])/(h[1,0,l+1]+h[1,0,l])+(2.*h[1,0,l+1]+h[1,0,l])*(s[1,0,l]-s[1,0,l-1])/(h[1,0,l]+h[1,0,l-1]))/(h[1,0,l+1]+h[1,0,l]+h[1,0,l-1])
	- ((h[-1,0,l]+2.*h[-1,0,l-1])*(s[-1,0,l+1]-s[-1,0,l])/(h[-1,0,l+1]+h[-1,0,l])+(2.*h[-1,0,l+1]+h[-1,0,l])*(s[-1,0,l]-s[-1,0,l-1])/(h[-1,0,l]+h[-1,0,l-1]))/(h[-1,0,l+1]+h[-1,0,l]+h[-1,0,l-1])   )
      *  (zl[1,0,l]-zl[-1,0,l]+h[1,0,l]/2.-h[-1,0,l]/2.)/(2.*sq(Delta));
      
    d-=( 6.*((s[0,0,l+1]-s[0,0,l])/(h[0,0,l+1]+h[0,0,l])-(s[0,0,l]-s[0,0,l-1])/(h[0,0,l]+h[0,0,l-1]))/(h[0,0,l+1]+h[0,0,l]+h[0,0,l-1]))
      * ((zl[1,0,l]+h[1,0,l]/2.-zl[0,0,l]-h[0,0,l]/2.)*(zl[-1,0,l]+h[-1,0,l]/2.-zl[0,0,l]-h[0,0,l]/2.))/sq(Delta);
  }
  else {
    if (active_layer == 0 && active_layer < nl-1){
      //d+=(s[1,0,l]-2.*s[0,0,l]+s[-1,0,l])/(sq(Delta));
      d-=((h[0,0,l+1]*(3.*h[0,0,l]+2.*h[0,0,l+1])*s[0,0,l]+sq(h[0,0,l])*s[0,0,l+1]-(h[0,0,l]+2.*h[0,0,l+1])*(h[0,0,l]+h[0,0,l+1])*sb[0,0])/(h[0,0,l]*sq(h[0,0,l]+h[0,0,l+1])))
	*(zl[1,0,l]+h[1,0,l]/2.-2.*zl[0,0,l]-h[0,0,l]+zl[-1,0,l]+h[-1,0,l]/2.)/sq(Delta);
    
      d-=(((h[1,0,l+1]*(3.*h[1,0,l]+2.*h[1,0,l+1])*s[1,0,l]+sq(h[1,0,l])*s[1,0,l+1]-(h[1,0,l]+2.*h[1,0,l+1])*(h[1,0,l]+h[1,0,l+1])*sb[1,0])/(h[1,0,l]*sq(h[1,0,l]+h[1,0,l+1])))
	  - ((h[-1,0,l+1]*(3.*h[-1,0,l]+2.*h[-1,0,l+1])*s[-1,0,l]+sq(h[-1,0,l])*s[-1,0,l+1]-(h[-1,0,l]+2.*h[-1,0,l+1])*(h[-1,0,l]+h[-1,0,l+1])*sb[-1,0])/(h[-1,0,l]*sq(h[-1,0,l]+h[-1,0,l+1]))))
	*  (zl[1,0,l]-zl[-1,0,l]+h[1,0,l]/2.-h[-1,0,l]/2.)/(2.*sq(Delta));
      
      d-=( 6.*((h[0,0,l]+h[0,0,l+1])*sb[0,0]-(2.*h[0,0,l]+h[0,0,l+1])*s[0,0,l]+h[0,0,l]*s[0,0,l+1])/(h[0,0,l]*sq(h[0,0,l]+h[0,0,l+1])))
	* ((zl[1,0,l]+h[1,0,l]/2.-zl[0,0,l]-h[0,0,l]/2.)*(zl[-1,0,l]+h[-1,0,l]/2.-zl[0,0,l]-h[0,0,l]/2.))/sq(Delta);
    }
    else{
      if (active_layer == nl-1 && active_layer > 0){
	//d+=(s[1,0,l]-2.*s[0,0,l]+s[-1,0,l])/(sq(Delta));
	d-=(((h[0,0,l]+2.*h[0,0,l-1])*(h[0,0,l]+h[0,0,l-1])*st[0,0]-h[0,0,l-1]*(3.*h[0,0,l]+2.*h[0,0,l-1])*s[0,0,l]-sq(h[0,0,l])*s[0,0,l-1])/(h[0,0,l]*sq(h[0,0,l]+h[0,0,l-1])))
	  *(zl[1,0,l]+h[1,0,l]/2.-2.*zl[0,0,l]-h[0,0,l]+zl[-1,0,l]+h[-1,0,l]/2.)/sq(Delta);
    
	d-=(((h[1,0,l]+2.*h[1,0,l-1])*(h[1,0,l]+h[1,0,l-1])*st[1,0]-h[1,0,l-1]*(3.*h[1,0,l]+2.*h[1,0,l-1])*s[1,0,l]-sq(h[1,0,l])*s[1,0,l-1])/(h[1,0,l]*sq(h[1,0,l]+h[1,0,l-1]))
	    - ((h[-1,0,l]+2.*h[-1,0,l-1])*(h[-1,0,l]+h[-1,0,l-1])*st[-1,0]-h[-1,0,l-1]*(3.*h[-1,0,l]+2.*h[-1,0,l-1])*s[-1,0,l]-sq(h[-1,0,l])*s[-1,0,l-1])/(h[-1,0,l]*sq(h[-1,0,l]+h[-1,0,l-1])))
	  *  (zl[1,0,l]-zl[-1,0,l]+h[1,0,l]/2.-h[-1,0,l]/2.)/(2.*sq(Delta));
      
	d-=( 6.*((h[0,0,l]+h[0,0,l-1])*st[0,0]-(2.*h[0,0,l]+h[0,0,l-1])*s[0,0,l]+h[0,0,l]*s[0,0,l-1])/(h[0,0,l]*sq(h[0,0,l]+h[0,0,l-1])))
	  * ((zl[1,0,l]+h[1,0,l]/2.-zl[0,0,l]-h[0,0,l]/2.)*(zl[-1,0,l]+h[-1,0,l]/2.-zl[0,0,l]-h[0,0,l]/2.))/sq(Delta);
      }
      else{
	//d+=(s[1,0,l]-2.*s[0,0,l]+s[-1,0,l])/(sq(Delta));
	d-=((st[0,0]-sb[0,0])/h[0,0,l]) * (zl[1,0,l]+h[1,0,l]/2.-2.*zl[0,0,l]-h[0,0,l]+zl[-1,0,l]+h[-1,0,l]/2.)/sq(Delta);
	d-=((st[1,0]-sb[1,0])/h[1,0,l]-(st[-1,0]-sb[-1,0])/h[-1,0,l]) * (zl[1,0,l]-zl[-1,0,l]+h[1,0,l]/2.-h[-1,0,l]/2.)/(2.*sq(Delta));
	d-=(6.*(st[0,0]-2.*s[0,0,l]+sb[0,0])/sq(h[0,0,l])) * ((zl[1,0,l]+h[1,0,l]/2.-zl[0,0,l]-h[0,0,l]/2.)*(zl[-1,0,l]+h[-1,0,l]/2.-zl[0,0,l]-h[0,0,l]/2.))/sq(Delta);
      }
    }
  }
  //fprintf(stderr,"%g ",d);
  return d;
}


