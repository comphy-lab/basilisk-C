/* colormaps from https://www.kennethmoreland.com/color-advice/ 
   I believe they are uncopyrighted as trivial wrapper around public domain  data */

/* Done by Fedor Zuev (see: http://basilisk.fr/sandbox/lqpkin/colormaps/)*/

void bent_cool_warm (double cmap[NCMAP][3])
{
/* generated by ../csv2func.pl */
  static double basemap[129][3] = {
    {0.23000, 0.29900,0.75400},
    {0.23756, 0.30997,0.75919},
    {0.24527, 0.32088,0.76429},
    {0.25312, 0.33173,0.76930},
    {0.26112, 0.34253,0.77422},
    {0.26925, 0.35329,0.77905},
    {0.27751, 0.36400,0.78379},
    {0.28591, 0.37468,0.78844},
    {0.29444, 0.38532,0.79300},
    {0.30310, 0.39593,0.79748},
    {0.31189, 0.40652,0.80188},
    {0.32080, 0.41707,0.80619},
    {0.32983, 0.42761,0.81042},
    {0.33899, 0.43812,0.81457},
    {0.34827, 0.44861,0.81863},
    {0.35767, 0.45909,0.82262},
    {0.36719, 0.46954,0.82653},
    {0.37682, 0.47998,0.83036},
    {0.38658, 0.49040,0.83412},
    {0.39645, 0.50081,0.83781},
    {0.40643, 0.51121,0.84142},
    {0.41653, 0.52159,0.84496},
    {0.42675, 0.53195,0.84843},
    {0.43708, 0.54231,0.85183},
    {0.44752, 0.55265,0.85516},
    {0.45808, 0.56298,0.85843},
    {0.46875, 0.57330,0.86163},
    {0.47953, 0.58360,0.86477},
    {0.49042, 0.59390,0.86785},
    {0.50143, 0.60418,0.87086},
    {0.51255, 0.61445,0.87382},
    {0.52378, 0.62471,0.87672},
    {0.53512, 0.63495,0.87957},
    {0.54657, 0.64519,0.88235},
    {0.55814, 0.65541,0.88509},
    {0.56982, 0.66562,0.88778},
    {0.58161, 0.67582,0.89041},
    {0.59351, 0.68600,0.89300},
    {0.60552, 0.69617,0.89554},
    {0.61765, 0.70633,0.89803},
    {0.62988, 0.71647,0.90049},
    {0.64223, 0.72661,0.90290},
    {0.65469, 0.73672,0.90527},
    {0.66727, 0.74682,0.90760},
    {0.67995, 0.75691,0.90990},
    {0.69275, 0.76698,0.91216},
    {0.70566, 0.77704,0.91438},
    {0.71869, 0.78708,0.91658},
    {0.73183, 0.79710,0.91875},
    {0.74508, 0.80710,0.92089},
    {0.75844, 0.81709,0.92300},
    {0.77192, 0.82706,0.92509},
    {0.78551, 0.83702,0.92716},
    {0.79922, 0.84695,0.92920},
    {0.81304, 0.85686,0.93123},
    {0.82697, 0.86676,0.93324},
    {0.84102, 0.87663,0.93524},
    {0.85518, 0.88648,0.93722},
    {0.86946, 0.89632,0.93919},
    {0.88385, 0.90613,0.94116},
    {0.89836, 0.91592,0.94311},
    {0.91298, 0.92568,0.94507},
    {0.92771, 0.93542,0.94702},
    {0.94256, 0.94514,0.94896},
    {0.94881, 0.94407,0.94122},
    {0.94635, 0.93220,0.92388},
    {0.94386, 0.92032,0.90667},
    {0.94135, 0.90843,0.88959},
    {0.93882, 0.89652,0.87264},
    {0.93626, 0.88459,0.85582},
    {0.93367, 0.87265,0.83914},
    {0.93105, 0.86070,0.82259},
    {0.92839, 0.84873,0.80618},
    {0.92570, 0.83675,0.78991},
    {0.92297, 0.82476,0.77378},
    {0.92021, 0.81274,0.75779},
    {0.91740, 0.80071,0.74194},
    {0.91456, 0.78867,0.72624},
    {0.91167, 0.77661,0.71068},
    {0.90874, 0.76453,0.69526},
    {0.90576, 0.75243,0.68000},
    {0.90274, 0.74031,0.66488},
    {0.89967, 0.72818,0.64992},
    {0.89656, 0.71602,0.63510},
    {0.89340, 0.70384,0.62044},
    {0.89019, 0.69164,0.60593},
    {0.88692, 0.67942,0.59158},
    {0.88361, 0.66717,0.57738},
    {0.88025, 0.65490,0.56334},
    {0.87683, 0.64260,0.54946},
    {0.87337, 0.63027,0.53574},
    {0.86985, 0.61790,0.52217},
    {0.86627, 0.60551,0.50877},
    {0.86265, 0.59308,0.49553},
    {0.85897, 0.58060,0.48246},
    {0.85523, 0.56809,0.46955},
    {0.85144, 0.55554,0.45680},
    {0.84760, 0.54293,0.44422},
    {0.84370, 0.53027,0.43181},
    {0.83975, 0.51756,0.41957},
    {0.83573, 0.50478,0.40750},
    {0.83167, 0.49194,0.39559},
    {0.82755, 0.47903,0.38386},
    {0.82337, 0.46603,0.37230},
    {0.81913, 0.45295,0.36092},
    {0.81484, 0.43977,0.34971},
    {0.81049, 0.42648,0.33868},
    {0.80609, 0.41308,0.32782},
    {0.80163, 0.39954,0.31714},
    {0.79711, 0.38586,0.30664},
    {0.79253, 0.37201,0.29632},
    {0.78790, 0.35799,0.28619},
    {0.78321, 0.34375,0.27623},
    {0.77847, 0.32927,0.26647},
    {0.77366, 0.31453,0.25688},
    {0.76880, 0.29947,0.24749},
    {0.76388, 0.28404,0.23828},
    {0.75891, 0.26818,0.22926},
    {0.75388, 0.25182,0.22044},
    {0.74879, 0.23483,0.21181},
    {0.74364, 0.21707,0.20338},
    {0.73844, 0.19836,0.19514},
    {0.73317, 0.17838,0.18711},
    {0.72785, 0.15670,0.17927},
    {0.72248, 0.13256,0.17164},
    {0.71704, 0.10452,0.16422},
    {0.71155, 0.06905,0.15700},
    {0.70600, 0.01599,0.15000},
  };
  for (int i = 0; i < NCMAP; i++) {
    double x = i*(127 - 1e-10)/(NCMAP - 1);
    int j = x; x -= j;
    for (int k = 0; k < 3; k++)
      cmap[i][k] = (1. - x)*basemap[j][k] + x*basemap[j+1][k];
  }
}

void black_body (double cmap[NCMAP][3])
{
/* generated by ../csv2func.pl */
  static double basemap[129][3] = {
    {0.00000, 0.00000,0.00000},
    {0.02618, 0.00754,0.00422},
    {0.05129, 0.01507,0.00845},
    {0.07085, 0.02261,0.01267},
    {0.08688, 0.03015,0.01689},
    {0.10070, 0.03768,0.02111},
    {0.11299, 0.04499,0.02534},
    {0.12413, 0.05162,0.02956},
    {0.13449, 0.05766,0.03379},
    {0.14526, 0.06255,0.03807},
    {0.15666, 0.06627,0.04237},
    {0.16848, 0.06928,0.04644},
    {0.18045, 0.07220,0.05023},
    {0.19256, 0.07505,0.05377},
    {0.20480, 0.07783,0.05710},
    {0.21716, 0.08054,0.06023},
    {0.22964, 0.08318,0.06319},
    {0.24224, 0.08576,0.06598},
    {0.25494, 0.08827,0.06864},
    {0.26774, 0.09071,0.07115},
    {0.28065, 0.09309,0.07354},
    {0.29365, 0.09540,0.07580},
    {0.30675, 0.09765,0.07796},
    {0.31994, 0.09983,0.08001},
    {0.33321, 0.10195,0.08201},
    {0.34656, 0.10400,0.08400},
    {0.35999, 0.10600,0.08600},
    {0.37349, 0.10793,0.08800},
    {0.38707, 0.10979,0.09000},
    {0.40071, 0.11159,0.09199},
    {0.41444, 0.11333,0.09399},
    {0.42823, 0.11501,0.09599},
    {0.44210, 0.11661,0.09798},
    {0.45603, 0.11816,0.09998},
    {0.47003, 0.11963,0.10198},
    {0.48411, 0.12104,0.10397},
    {0.49825, 0.12238,0.10597},
    {0.51245, 0.12365,0.10797},
    {0.52673, 0.12486,0.10997},
    {0.54106, 0.12599,0.11196},
    {0.55547, 0.12705,0.11396},
    {0.56993, 0.12803,0.11596},
    {0.58446, 0.12895,0.11796},
    {0.59905, 0.12978,0.11996},
    {0.61371, 0.13054,0.12196},
    {0.62842, 0.13123,0.12396},
    {0.64319, 0.13183,0.12596},
    {0.65803, 0.13235,0.12797},
    {0.67292, 0.13279,0.12997},
    {0.68787, 0.13314,0.13197},
    {0.70057, 0.13824,0.13281},
    {0.70842, 0.15290,0.13109},
    {0.71627, 0.16678,0.12926},
    {0.72411, 0.18007,0.12731},
    {0.73196, 0.19287,0.12522},
    {0.73979, 0.20528,0.12299},
    {0.74763, 0.21735,0.12061},
    {0.75546, 0.22914,0.11808},
    {0.76329, 0.24069,0.11537},
    {0.77112, 0.25204,0.11248},
    {0.77895, 0.26321,0.10939},
    {0.78677, 0.27422,0.10609},
    {0.79459, 0.28510,0.10255},
    {0.80241, 0.29586,0.09874},
    {0.81022, 0.30651,0.09465},
    {0.81804, 0.31707,0.09023},
    {0.82585, 0.32755,0.08545},
    {0.83366, 0.33796,0.08024},
    {0.84147, 0.34830,0.07453},
    {0.84927, 0.35858,0.06823},
    {0.85708, 0.36881,0.06121},
    {0.86488, 0.37899,0.05327},
    {0.87269, 0.38913,0.04412},
    {0.88049, 0.39923,0.03350},
    {0.88829, 0.40930,0.02238},
    {0.89161, 0.42271,0.02269},
    {0.89342, 0.43702,0.02703},
    {0.89516, 0.45112,0.03168},
    {0.89683, 0.46504,0.03665},
    {0.89842, 0.47879,0.04190},
    {0.89993, 0.49240,0.04711},
    {0.90137, 0.50587,0.05226},
    {0.90273, 0.51922,0.05736},
    {0.90402, 0.53246,0.06241},
    {0.90522, 0.54559,0.06742},
    {0.90635, 0.55863,0.07240},
    {0.90740, 0.57159,0.07736},
    {0.90837, 0.58447,0.08229},
    {0.90925, 0.59728,0.08721},
    {0.91005, 0.61002,0.09211},
    {0.91077, 0.62270,0.09700},
    {0.91140, 0.63533,0.10188},
    {0.91195, 0.64790,0.10675},
    {0.91241, 0.66043,0.11161},
    {0.91279, 0.67291,0.11647},
    {0.91307, 0.68535,0.12133},
    {0.91327, 0.69776,0.12619},
    {0.91337, 0.71013,0.13104},
    {0.91338, 0.72247,0.13590},
    {0.91330, 0.73478,0.14075},
    {0.91313, 0.74706,0.14561},
    {0.91285, 0.75932,0.15047},
    {0.91248, 0.77156,0.15533},
    {0.91201, 0.78377,0.16020},
    {0.91144, 0.79597,0.16507},
    {0.91077, 0.80815,0.16994},
    {0.91000, 0.82032,0.17482},
    {0.90912, 0.83247,0.17971},
    {0.90813, 0.84461,0.18460},
    {0.90704, 0.85673,0.18949},
    {0.90583, 0.86885,0.19440},
    {0.90452, 0.88096,0.19931},
    {0.90309, 0.89306,0.20422},
    {0.90530, 0.90367,0.23011},
    {0.91750, 0.91016,0.30364},
    {0.92897, 0.91671,0.36767},
    {0.93968, 0.92330,0.42673},
    {0.94962, 0.92995,0.48283},
    {0.95875, 0.93666,0.53705},
    {0.96706, 0.94342,0.59003},
    {0.97451, 0.95025,0.64218},
    {0.98107, 0.95714,0.69379},
    {0.98672, 0.96410,0.74505},
    {0.99143, 0.97113,0.79610},
    {0.99515, 0.97823,0.84706},
    {0.99784, 0.98541,0.89798},
    {0.99948, 0.99267,0.94895},
    {1.00000, 1.00000,1.00000},
  };
  for (int i = 0; i < NCMAP; i++) {
    double x = i*(127 - 1e-10)/(NCMAP - 1);
    int j = x; x -= j;
    for (int k = 0; k < 3; k++)
      cmap[i][k] = (1. - x)*basemap[j][k] + x*basemap[j+1][k];
  }
}

void inferno (double cmap[NCMAP][3])
{
/* generated by ../csv2func.pl */
  static double basemap[129][3] = {
    {0.00146, 0.00047,0.01387},
    {0.00331, 0.00226,0.02429},
    {0.00603, 0.00471,0.03870},
    {0.00961, 0.00775,0.05535},
    {0.01408, 0.01128,0.07214},
    {0.01949, 0.01521,0.08912},
    {0.02598, 0.01943,0.10634},
    {0.03364, 0.02382,0.12388},
    {0.04258, 0.02827,0.14171},
    {0.05202, 0.03262,0.15990},
    {0.06177, 0.03674,0.17837},
    {0.07187, 0.04046,0.19717},
    {0.08246, 0.04347,0.21618},
    {0.09356, 0.04569,0.23533},
    {0.10520, 0.04707,0.25447},
    {0.11739, 0.04757,0.27342},
    {0.13010, 0.04724,0.29192},
    {0.14327, 0.04615,0.30969},
    {0.15682, 0.04442,0.32646},
    {0.17061, 0.04233,0.34195},
    {0.18452, 0.04017,0.35599},
    {0.19844, 0.03828,0.36848},
    {0.21228, 0.03696,0.37942},
    {0.22599, 0.03641,0.38890},
    {0.23954, 0.03670,0.39704},
    {0.25292, 0.03787,0.40399},
    {0.26615, 0.03990,0.40988},
    {0.27923, 0.04269,0.41486},
    {0.29218, 0.04604,0.41905},
    {0.30502, 0.04985,0.42253},
    {0.31778, 0.05399,0.42541},
    {0.33046, 0.05837,0.42776},
    {0.34308, 0.06290,0.42962},
    {0.35566, 0.06752,0.43106},
    {0.36820, 0.07220,0.43210},
    {0.38072, 0.07689,0.43278},
    {0.39322, 0.08158,0.43313},
    {0.40571, 0.08625,0.43316},
    {0.41819, 0.09089,0.43287},
    {0.43068, 0.09549,0.43230},
    {0.44317, 0.10005,0.43143},
    {0.45566, 0.10457,0.43029},
    {0.46816, 0.10905,0.42886},
    {0.48067, 0.11351,0.42716},
    {0.49318, 0.11794,0.42518},
    {0.50571, 0.12235,0.42293},
    {0.51823, 0.12675,0.42040},
    {0.53076, 0.13115,0.41760},
    {0.54328, 0.13556,0.41451},
    {0.55580, 0.13998,0.41115},
    {0.56831, 0.14444,0.40752},
    {0.58080, 0.14894,0.40360},
    {0.59328, 0.15349,0.39940},
    {0.60573, 0.15812,0.39493},
    {0.61814, 0.16282,0.39018},
    {0.63051, 0.16762,0.38516},
    {0.64284, 0.17253,0.37987},
    {0.65511, 0.17756,0.37431},
    {0.66731, 0.18273,0.36849},
    {0.67944, 0.18805,0.36241},
    {0.69148, 0.19355,0.35609},
    {0.70342, 0.19923,0.34951},
    {0.71526, 0.20511,0.34270},
    {0.72699, 0.21120,0.33566},
    {0.73858, 0.21752,0.32840},
    {0.75003, 0.22408,0.32093},
    {0.76133, 0.23089,0.31326},
    {0.77246, 0.23797,0.30540},
    {0.78342, 0.24532,0.29736},
    {0.79418, 0.25296,0.28915},
    {0.80474, 0.26089,0.28079},
    {0.81509, 0.26911,0.27228},
    {0.82521, 0.27764,0.26363},
    {0.83510, 0.28648,0.25486},
    {0.84473, 0.29563,0.24598},
    {0.85411, 0.30508,0.23699},
    {0.86321, 0.31484,0.22789},
    {0.87204, 0.32491,0.21871},
    {0.88057, 0.33527,0.20943},
    {0.88882, 0.34593,0.20007},
    {0.89675, 0.35687,0.19062},
    {0.90438, 0.36809,0.18109},
    {0.91170, 0.37959,0.17148},
    {0.91870, 0.39134,0.16177},
    {0.92537, 0.40335,0.15197},
    {0.93172, 0.41559,0.14208},
    {0.93773, 0.42807,0.13208},
    {0.94342, 0.44077,0.12197},
    {0.94877, 0.45367,0.11176},
    {0.95378, 0.46678,0.10145},
    {0.95846, 0.48007,0.09105},
    {0.96279, 0.49355,0.08059},
    {0.96679, 0.50720,0.07013},
    {0.97045, 0.52100,0.05978},
    {0.97377, 0.53497,0.04971},
    {0.97674, 0.54907,0.04024},
    {0.97936, 0.56332,0.03227},
    {0.98164, 0.57770,0.02679},
    {0.98358, 0.59220,0.02397},
    {0.98516, 0.60681,0.02407},
    {0.98639, 0.62154,0.02734},
    {0.98726, 0.63637,0.03409},
    {0.98778, 0.65130,0.04448},
    {0.98794, 0.66633,0.05711},
    {0.98775, 0.68144,0.07121},
    {0.98719, 0.69663,0.08642},
    {0.98626, 0.71189,0.10254},
    {0.98498, 0.72722,0.11946},
    {0.98333, 0.74261,0.13714},
    {0.98133, 0.75804,0.15556},
    {0.97897, 0.77351,0.17476},
    {0.97629, 0.78900,0.19476},
    {0.97327, 0.80450,0.21564},
    {0.96997, 0.81997,0.23748},
    {0.96643, 0.83540,0.26036},
    {0.96270, 0.85075,0.28441},
    {0.95889, 0.86597,0.30972},
    {0.95515, 0.88098,0.33642},
    {0.95167, 0.89571,0.36462},
    {0.94877, 0.91003,0.39435},
    {0.94686, 0.92379,0.42551},
    {0.94640, 0.93685,0.45783},
    {0.94790, 0.94908,0.49078},
    {0.95167, 0.96041,0.52369},
    {0.95782, 0.97088,0.55590},
    {0.96618, 0.98060,0.58696},
    {0.97647, 0.98972,0.61664},
    {0.98836, 0.99836,0.64492},
  };
  for (int i = 0; i < NCMAP; i++) {
    double x = i*(127 - 1e-10)/(NCMAP - 1);
    int j = x; x -= j;
    for (int k = 0; k < 3; k++)
      cmap[i][k] = (1. - x)*basemap[j][k] + x*basemap[j+1][k];
  }
}

void kindlmann (double cmap[NCMAP][3])
{
/* generated by ../csv2func.pl */
  static double basemap[129][3] = {
    {0.00000, 0.00000,0.00000},
    {0.03577, 0.00177,0.03307},
    {0.06608, 0.00316,0.06487},
    {0.08812, 0.00431,0.08999},
    {0.10546, 0.00538,0.11262},
    {0.11799, 0.00658,0.13770},
    {0.12738, 0.00784,0.16335},
    {0.13496, 0.00898,0.18817},
    {0.14093, 0.01017,0.21208},
    {0.14565, 0.01123,0.23536},
    {0.14927, 0.01234,0.25773},
    {0.15203, 0.01336,0.28001},
    {0.15382, 0.01445,0.30317},
    {0.15457, 0.01559,0.32718},
    {0.15419, 0.01685,0.35186},
    {0.15259, 0.01798,0.37743},
    {0.14975, 0.01922,0.40339},
    {0.14567, 0.02051,0.42966},
    {0.14038, 0.02176,0.45612},
    {0.13401, 0.02302,0.48251},
    {0.12683, 0.02430,0.50857},
    {0.11914, 0.02553,0.53417},
    {0.11150, 0.02675,0.55905},
    {0.10451, 0.02789,0.58313},
    {0.09886, 0.02892,0.60635},
    {0.09499, 0.03006,0.62861},
    {0.07473, 0.03131,0.65558},
    {0.03278, 0.03715,0.68225},
    {0.03314, 0.06281,0.68711},
    {0.03299, 0.08897,0.68657},
    {0.03272, 0.11457,0.68100},
    {0.03219, 0.13897,0.67129},
    {0.03156, 0.16188,0.65837},
    {0.03097, 0.18318,0.64318},
    {0.03037, 0.20290,0.62662},
    {0.02945, 0.22114,0.60948},
    {0.02868, 0.23806,0.59218},
    {0.02775, 0.25382,0.57519},
    {0.02663, 0.26857,0.55876},
    {0.02617, 0.28246,0.54290},
    {0.02554, 0.29563,0.52787},
    {0.02484, 0.30819,0.51369},
    {0.02409, 0.32023,0.50036},
    {0.02328, 0.33184,0.48785},
    {0.02288, 0.34308,0.47606},
    {0.02231, 0.35402,0.46505},
    {0.02201, 0.36469,0.45470},
    {0.02135, 0.37515,0.44503},
    {0.02079, 0.38543,0.43596},
    {0.02082, 0.39554,0.42740},
    {0.02019, 0.40554,0.41940},
    {0.02035, 0.41540,0.41182},
    {0.02044, 0.42525,0.40391},
    {0.02114, 0.43510,0.39528},
    {0.02182, 0.44496,0.38593},
    {0.02182, 0.45485,0.37585},
    {0.02245, 0.46472,0.36505},
    {0.02303, 0.47459,0.35351},
    {0.02358, 0.48446,0.34124},
    {0.02406, 0.49431,0.32823},
    {0.02448, 0.50416,0.31446},
    {0.02482, 0.51399,0.29995},
    {0.02506, 0.52380,0.28469},
    {0.02594, 0.53357,0.26875},
    {0.02592, 0.54334,0.25198},
    {0.02654, 0.55306,0.23457},
    {0.02701, 0.56274,0.21643},
    {0.02728, 0.57240,0.19758},
    {0.02825, 0.58201,0.17818},
    {0.02902, 0.59158,0.15815},
    {0.02956, 0.60111,0.13754},
    {0.02985, 0.61061,0.11644},
    {0.02986, 0.62008,0.09497},
    {0.03062, 0.62949,0.07375},
    {0.03113, 0.63887,0.05309},
    {0.03137, 0.64823,0.03428},
    {0.05379, 0.65708,0.03159},
    {0.06797, 0.66604,0.03176},
    {0.08141, 0.67500,0.03240},
    {0.09897, 0.68381,0.03266},
    {0.12037, 0.69242,0.03310},
    {0.14458, 0.70081,0.03368},
    {0.17085, 0.70896,0.03436},
    {0.19833, 0.71687,0.03443},
    {0.22737, 0.72448,0.03519},
    {0.25709, 0.73182,0.03524},
    {0.28764, 0.73885,0.03523},
    {0.31904, 0.74554,0.03587},
    {0.35095, 0.75190,0.03641},
    {0.38329, 0.75793,0.03684},
    {0.41599, 0.76361,0.03713},
    {0.44899, 0.76894,0.03727},
    {0.48222, 0.77391,0.03723},
    {0.51573, 0.77851,0.03784},
    {0.54927, 0.78278,0.03744},
    {0.58298, 0.78667,0.03772},
    {0.61673, 0.79021,0.03784},
    {0.65047, 0.79341,0.03782},
    {0.68422, 0.79625,0.03857},
    {0.71785, 0.79877,0.03831},
    {0.75141, 0.80095,0.03890},
    {0.78481, 0.80283,0.03849},
    {0.81822, 0.80434,0.03947},
    {0.85298, 0.80506,0.04143},
    {0.88947, 0.80478,0.04298},
    {0.92777, 0.80338,0.04428},
    {0.96168, 0.80140,0.19576},
    {0.97145, 0.80405,0.40100},
    {0.97652, 0.80946,0.50772},
    {0.98001, 0.81633,0.58072},
    {0.98264, 0.82416,0.63626},
    {0.98479, 0.83267,0.68090},
    {0.98649, 0.84173,0.71833},
    {0.98804, 0.85117,0.75026},
    {0.98934, 0.86095,0.77826},
    {0.99056, 0.87097,0.80306},
    {0.99158, 0.88123,0.82551},
    {0.99252, 0.89165,0.84599},
    {0.99342, 0.90221,0.86486},
    {0.99426, 0.91288,0.88245},
    {0.99512, 0.92361,0.89897},
    {0.99587, 0.93444,0.91473},
    {0.99651, 0.94533,0.92988},
    {0.99722, 0.95624,0.94447},
    {0.99796, 0.96716,0.95865},
    {0.99867, 0.97810,0.97257},
    {0.99925, 0.98907,0.98637},
    {1.00000, 1.00000,1.00000},
  };
  for (int i = 0; i < NCMAP; i++) {
    double x = i*(127 - 1e-10)/(NCMAP - 1);
    int j = x; x -= j;
    for (int k = 0; k < 3; k++)
      cmap[i][k] = (1. - x)*basemap[j][k] + x*basemap[j+1][k];
  }
}

void smooth_cool_warm (double cmap[NCMAP][3])
{
/* generated by ../csv2func.pl */
  static double basemap[129][3] = {
    {0.23000, 0.29900,0.75400},
    {0.23909, 0.31277,0.76641},
    {0.24824, 0.32650,0.77857},
    {0.25747, 0.34017,0.79047},
    {0.26676, 0.35378,0.80211},
    {0.27614, 0.36734,0.81347},
    {0.28559, 0.38083,0.82455},
    {0.29513, 0.39426,0.83535},
    {0.30475, 0.40761,0.84585},
    {0.31445, 0.42089,0.85605},
    {0.32423, 0.43408,0.86594},
    {0.33409, 0.44719,0.87552},
    {0.34404, 0.46020,0.88479},
    {0.35407, 0.47311,0.89372},
    {0.36417, 0.48592,0.90233},
    {0.37436, 0.49861,0.91060},
    {0.38462, 0.51119,0.91853},
    {0.39495, 0.52364,0.92611},
    {0.40535, 0.53597,0.93335},
    {0.41582, 0.54816,0.94023},
    {0.42634, 0.56020,0.94675},
    {0.43693, 0.57210,0.95291},
    {0.44758, 0.58385,0.95870},
    {0.45827, 0.59543,0.96413},
    {0.46901, 0.60685,0.96918},
    {0.47979, 0.61810,0.97385},
    {0.49061, 0.62916,0.97815},
    {0.50146, 0.64005,0.98207},
    {0.51233, 0.65074,0.98560},
    {0.52323, 0.66124,0.98875},
    {0.53414, 0.67153,0.99152},
    {0.54506, 0.68162,0.99390},
    {0.55599, 0.69149,0.99588},
    {0.56691, 0.70115,0.99748},
    {0.57782, 0.71058,0.99869},
    {0.58872, 0.71977,0.99951},
    {0.59960, 0.72874,0.99994},
    {0.61045, 0.73746,0.99998},
    {0.62127, 0.74594,0.99963},
    {0.63205, 0.75416,0.99889},
    {0.64278, 0.76213,0.99776},
    {0.65346, 0.76984,0.99625},
    {0.66408, 0.77729,0.99434},
    {0.67463, 0.78446,0.99206},
    {0.68511, 0.79136,0.98939},
    {0.69551, 0.79797,0.98634},
    {0.70582, 0.80431,0.98292},
    {0.71605, 0.81035,0.97912},
    {0.72617, 0.81611,0.97494},
    {0.73618, 0.82157,0.97040},
    {0.74609, 0.82673,0.96549},
    {0.75587, 0.83158,0.96021},
    {0.76553, 0.83613,0.95458},
    {0.77505, 0.84037,0.94859},
    {0.78444, 0.84429,0.94225},
    {0.79368, 0.84790,0.93556},
    {0.80276, 0.85119,0.92853},
    {0.81169, 0.85415,0.92116},
    {0.82046, 0.85679,0.91345},
    {0.82905, 0.85911,0.90542},
    {0.83746, 0.86109,0.89706},
    {0.84570, 0.86274,0.88839},
    {0.85374, 0.86405,0.87940},
    {0.86158, 0.86503,0.87010},
    {0.86985, 0.86361,0.85986},
    {0.87840, 0.85978,0.84878},
    {0.88656, 0.85563,0.83757},
    {0.89433, 0.85115,0.82622},
    {0.90172, 0.84634,0.81476},
    {0.90873, 0.84122,0.80318},
    {0.91535, 0.83578,0.79149},
    {0.92160, 0.83002,0.77971},
    {0.92746, 0.82395,0.76783},
    {0.93294, 0.81757,0.75587},
    {0.93804, 0.81088,0.74383},
    {0.94276, 0.80389,0.73172},
    {0.94710, 0.79660,0.71954},
    {0.95107, 0.78901,0.70731},
    {0.95466, 0.78113,0.69502},
    {0.95787, 0.77296,0.68270},
    {0.96070, 0.76450,0.67034},
    {0.96316, 0.75577,0.65795},
    {0.96525, 0.74675,0.64553},
    {0.96697, 0.73746,0.63310},
    {0.96831, 0.72790,0.62066},
    {0.96928, 0.71808,0.60821},
    {0.96988, 0.70799,0.59577},
    {0.97012, 0.69764,0.58334},
    {0.96999, 0.68705,0.57092},
    {0.96949, 0.67620,0.55852},
    {0.96863, 0.66510,0.54614},
    {0.96740, 0.65377,0.53380},
    {0.96582, 0.64219,0.52150},
    {0.96388, 0.63038,0.50924},
    {0.96158, 0.61834,0.49703},
    {0.95892, 0.60608,0.48487},
    {0.95592, 0.59359,0.47277},
    {0.95256, 0.58088,0.46074},
    {0.94886, 0.56795,0.44878},
    {0.94481, 0.55480,0.43688},
    {0.94042, 0.54145,0.42507},
    {0.93569, 0.52788,0.41334},
    {0.93063, 0.51411,0.40170},
    {0.92523, 0.50012,0.39015},
    {0.91951, 0.48593,0.37870},
    {0.91345, 0.47152,0.36734},
    {0.90707, 0.45691,0.35609},
    {0.90038, 0.44208,0.34495},
    {0.89337, 0.42703,0.33393},
    {0.88604, 0.41175,0.32301},
    {0.87841, 0.39624,0.31222},
    {0.87047, 0.38049,0.30155},
    {0.86224, 0.36448,0.29100},
    {0.85371, 0.34819,0.28059},
    {0.84489, 0.33160,0.27031},
    {0.83578, 0.31468,0.26016},
    {0.82639, 0.29739,0.25015},
    {0.81672, 0.27968,0.24028},
    {0.80679, 0.26147,0.23056},
    {0.79658, 0.24269,0.22099},
    {0.78612, 0.22320,0.21156},
    {0.77540, 0.20283,0.20229},
    {0.76442, 0.18131,0.19317},
    {0.75321, 0.15824,0.18421},
    {0.74175, 0.13290,0.17541},
    {0.73006, 0.10394,0.16677},
    {0.71814, 0.06803,0.15830},
    {0.70600, 0.01599,0.15000},
  };
  for (int i = 0; i < NCMAP; i++) {
    double x = i*(127 - 1e-10)/(NCMAP - 1);
    int j = x; x -= j;
    for (int k = 0; k < 3; k++)
      cmap[i][k] = (1. - x)*basemap[j][k] + x*basemap[j+1][k];
  }
}

void viridis (double cmap[NCMAP][3])
{
/* generated by ../csv2func.pl */
  static double basemap[129][3] = {
    {0.26700, 0.00487,0.32942},
    {0.26995, 0.01466,0.34143},
    {0.27261, 0.02565,0.35318},
    {0.27498, 0.03790,0.36468},
    {0.27705, 0.05053,0.37589},
    {0.27882, 0.06237,0.38680},
    {0.28030, 0.07368,0.39741},
    {0.28147, 0.08462,0.40769},
    {0.28235, 0.09529,0.41764},
    {0.28292, 0.10576,0.42723},
    {0.28320, 0.11608,0.43647},
    {0.28318, 0.12629,0.44533},
    {0.28286, 0.13639,0.45381},
    {0.28225, 0.14642,0.46191},
    {0.28135, 0.15638,0.46961},
    {0.28018, 0.16627,0.47691},
    {0.27873, 0.17611,0.48381},
    {0.27701, 0.18588,0.49031},
    {0.27504, 0.19559,0.49642},
    {0.27283, 0.20524,0.50213},
    {0.27040, 0.21482,0.50745},
    {0.26774, 0.22433,0.51240},
    {0.26489, 0.23377,0.51697},
    {0.26186, 0.24313,0.52120},
    {0.25866, 0.25241,0.52508},
    {0.25531, 0.26160,0.52864},
    {0.25184, 0.27071,0.53189},
    {0.24825, 0.27972,0.53485},
    {0.24457, 0.28865,0.53754},
    {0.24081, 0.29748,0.53997},
    {0.23699, 0.30622,0.54216},
    {0.23314, 0.31487,0.54414},
    {0.22926, 0.32343,0.54591},
    {0.22537, 0.33189,0.54751},
    {0.22148, 0.34027,0.54893},
    {0.21761, 0.34856,0.55020},
    {0.21377, 0.35677,0.55133},
    {0.20996, 0.36490,0.55234},
    {0.20621, 0.37295,0.55324},
    {0.20251, 0.38093,0.55404},
    {0.19887, 0.38884,0.55475},
    {0.19530, 0.39669,0.55537},
    {0.19179, 0.40448,0.55592},
    {0.18836, 0.41221,0.55640},
    {0.18499, 0.41989,0.55682},
    {0.18169, 0.42753,0.55718},
    {0.17845, 0.43512,0.55748},
    {0.17527, 0.44268,0.55773},
    {0.17214, 0.45020,0.55792},
    {0.16907, 0.45770,0.55805},
    {0.16603, 0.46517,0.55813},
    {0.16304, 0.47262,0.55815},
    {0.16007, 0.48005,0.55810},
    {0.15713, 0.48747,0.55798},
    {0.15421, 0.49488,0.55779},
    {0.15130, 0.50228,0.55752},
    {0.14842, 0.50967,0.55716},
    {0.14555, 0.51706,0.55671},
    {0.14271, 0.52445,0.55616},
    {0.13990, 0.53184,0.55549},
    {0.13714, 0.53923,0.55471},
    {0.13444, 0.54662,0.55380},
    {0.13183, 0.55401,0.55275},
    {0.12935, 0.56141,0.55155},
    {0.12702, 0.56880,0.55020},
    {0.12489, 0.57620,0.54868},
    {0.12303, 0.58360,0.54698},
    {0.12148, 0.59100,0.54511},
    {0.12032, 0.59839,0.54303},
    {0.11962, 0.60578,0.54076},
    {0.11947, 0.61317,0.53827},
    {0.11992, 0.62054,0.53556},
    {0.12107, 0.62790,0.53263},
    {0.12297, 0.63525,0.52946},
    {0.12569, 0.64258,0.52605},
    {0.12927, 0.64989,0.52238},
    {0.13373, 0.65718,0.51846},
    {0.13909, 0.66444,0.51427},
    {0.14535, 0.67166,0.50982},
    {0.15249, 0.67885,0.50509},
    {0.16049, 0.68600,0.50008},
    {0.16931, 0.69310,0.49478},
    {0.17892, 0.70016,0.48920},
    {0.18927, 0.70716,0.48332},
    {0.20033, 0.71410,0.47715},
    {0.21205, 0.72098,0.47068},
    {0.22439, 0.72780,0.46390},
    {0.23733, 0.73453,0.45682},
    {0.25082, 0.74120,0.44944},
    {0.26484, 0.74777,0.44174},
    {0.27936, 0.75426,0.43373},
    {0.29436, 0.76066,0.42542},
    {0.30980, 0.76696,0.41679},
    {0.32568, 0.77316,0.40785},
    {0.34197, 0.77925,0.39860},
    {0.35865, 0.78522,0.38903},
    {0.37570, 0.79107,0.37916},
    {0.39313, 0.79680,0.36897},
    {0.41089, 0.80241,0.35848},
    {0.42900, 0.80788,0.34768},
    {0.44742, 0.81321,0.33658},
    {0.46615, 0.81840,0.32518},
    {0.48516, 0.82344,0.31349},
    {0.50446, 0.82833,0.30151},
    {0.52401, 0.83307,0.28925},
    {0.54382, 0.83765,0.27672},
    {0.56385, 0.84207,0.26395},
    {0.58409, 0.84633,0.25093},
    {0.60453, 0.85043,0.23771},
    {0.62513, 0.85437,0.22431},
    {0.64588, 0.85815,0.21078},
    {0.66675, 0.86177,0.19716},
    {0.68771, 0.86525,0.18354},
    {0.70875, 0.86857,0.17001},
    {0.72982, 0.87175,0.15671},
    {0.75090, 0.87481,0.14384},
    {0.77195, 0.87774,0.13163},
    {0.79294, 0.88057,0.12044},
    {0.81384, 0.88330,0.11068},
    {0.83462, 0.88594,0.10287},
    {0.85525, 0.88853,0.09758},
    {0.87569, 0.89106,0.09528},
    {0.89593, 0.89357,0.09630},
    {0.91593, 0.89605,0.10064},
    {0.93567, 0.89854,0.10804},
    {0.95515, 0.90104,0.11805},
    {0.97434, 0.90358,0.13017},
    {0.99325, 0.90615,0.14394},
  };
  for (int i = 0; i < NCMAP; i++) {
    double x = i*(127 - 1e-10)/(NCMAP - 1);
    int j = x; x -= j;
    for (int k = 0; k < 3; k++)
      cmap[i][k] = (1. - x)*basemap[j][k] + x*basemap[j+1][k];
  }
}