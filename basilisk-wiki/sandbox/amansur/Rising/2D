/**
# 2D simulation

This code is written as a 3D simulation, but if not specified in the file or in the Terminal command line, the compiler won't take into account the parameters of the third dimension (*c.f.* [3D simulation](http://basilisk.fr/sandbox/amansur/Rising/3D)).
*/
  
/**
## Files inclusion

We solve the incompressible, variable-density, Navier-Stokes equations with interfaces and surface tension.
*/

#include "navier-stokes/centered.h"
#include "vof.h"
#include "tension.h"

/**
## Definition of macros

*Macro definitions allow constant values to be declared for use throughout your code.  
Macro definitions are not variables and cannot be changed by your program code like variables. You generally use this syntax when creating constants that represent numbers, strings or expressions.*

- The equation is non-dimensionalized (*c.f.* [Non_dimensionalization](http://basilisk.fr/sandbox/amansur/Marangoni_effect/Non_dimensionalization)) with the radius of the droplet.  

- We define a viscosity and density for both of the fluids **mu** and **rho**.  

- The **LEVEL** of mesh refinement is set at 8.
*/

# define R 1e-3 
# define L (30.0*R)
# define x_min (3*R)

# define mu1 1.8e-5
# define mu2 1e-3
# define rho1 1.225
# define rho2 1e3

# define LEVEL 6

/**
## Definition of fields

The interface between the two-phases will be tracked with the [volume fraction](http://basilisk.fr/src/fractions.h#volume-fractions) field *c*.  
We allocate the fields for the variable density and viscosity (*alphav, rhov* and *muv* respectively).  

Notice that *alphav* is a [face vector](http://basilisk.fr/Basilisk%20C#face-and-vertex-fields) which is the flux of 1/*rhov*.
*/

scalar c[];
scalar *interfaces = {c};
scalar rhov[];
face vector alphav[];
face vector muv[];

/**
## Boundary conditions
*/

u.n[top]    = dirichlet(0); 
u.t[top]    = neumann(0); 
u.n[back] = dirichlet(0); 
u.t[back] = neumann(0); 
u.n[front]    = dirichlet(0); 
u.t[front]    = neumann(0); 
u.n[bottom] = dirichlet(0); 
u.t[bottom] = neumann(0); 
u.n[right] = neumann(0); 
u.t[right] = dirichlet(0); 
u.n[left] = neumann(0); 
u.t[left] = dirichlet(0); 

/**
## Main

The density and viscosity are defined by the variable fields we allocated above. The surface tension at the interface of both fluids in set at 0.07.

By default the domain on which the equations are solved is a square box with reflective boundaries (i.e. symmetry conditions on scalar, vector and tensor fields). The origin of the coordinate system is the lower-left corner of the box and the box length is one. We can change this using the **origin()** and **size()** (or **L0 = ..**) functions.

The **TOLERANCE** of the Poisson and viscous solvers is set to 1e-6.

**init_grid** sets the spatial discretization of the simulation.
The *<<* operator in C is a bit-shifting operation. All we
need to know here is that *1 << LEVEL* is identical to $2^{LEVEL}$. If
we want to change the resolution of the simulation, all we need to do
now is change the single value at the top of the file.

The **run()** function launch the simulation by executing the event with a time step defined in the [tension.h](http://basilisk.fr/src/tension.h#stability-condition) file (oscillation period of the smallest capillary wave).
*/
 
int main() 
{
  origin ( -x_min, -L/2, -L/2);
  L0 = L;
  
  TOLERANCE = 1e-6;
  alpha = alphav;
  rho = rhov;
  mu = muv;
  c.sigma = 0.07;
  init_grid (1 << LEVEL);
  run();
}



/**
## Interface definition

First we define the interface with a level-set method. Then we use the [fractions()](http://basilisk.fr/src/fractions.h#computing-volume-fractions-from-a-levelset-function) function, which computes a volume fractions field out of a levelset function.

Here, we define a cercle (in 2D) or a sphere (in 3D) of radius R.
*/

event init_interface (i = 0) 
{  
    vertex scalar phi[];
    foreach_vertex()
      phi[] = sq(R) - sq(x) - sq(y) - sq(z);
    fractions (phi, c);
}

/**
## Properties

The density and viscosity are defined using the [VOF method](http://basilisk.fr/src/vof.h).

**cm** is the value of the volume fraction at the x face.  
*Note that a face is defined by convention as separating a cell from its **left** neighbour (see the [Face and vertex fields section](http://basilisk.fr/Basilisk%20C#face-and-vertex-fields)).*
*/
#define rho(c) (rho1*c + (1. - (c))*rho2)
#define mu(c)  (mu1*c + (1. - (c))*mu2)

event properties (i++) 
{
  foreach_face() 
  {
    double cm = (c[] + c[-1])/2.;
    alphav.x[] = fm.x[]/rho(cm);
    muv.x[] = (fm.x[]*mu(cm));
  }
  foreach(){
    rhov[] = cm[]*rho(c[]);
  }
}


/**
## Tracers

By default tracers are defined at t−$\Delta$t/2. We use the first keyword to move VOF advection before the logfile output i.e. at t+$\Delta$/2. This improves the results.
*/

event vof (i++, first);


/**
## Body forces

Here, we input a body force, which is gravity. The direction of the force is on the x direction. 

The acceleration of gravity is set to -9.81 [m/s²].
*/

event acceleration (i++) {
  face vector av = a;
  foreach_face(x)
    av.x[] -= 9.81;
}


/**
## Outputs

The bubble's velocity is the sommation of the velocity field in the bubble. The volume fraction *c* being defined as 1 inside the bubble and 0 outside, the velocity field of the bubble is therefore c[ ]*u.x[ ].  
The function [statsf](http://basilisk.fr/src/utils.h#134) makes the volumic sommation of a field.  
We then get the mean velocity of the bubble, that we store in a file named *v_bubble.dat*.  

To observe the evolution of the bubble, we also output the pictures of the volume fraction.
*/

face vector u_bubble[];
event output_velocity(t+=0.002){
  
  foreach_face() {
    u_bubble.x[] = (c[]*u.x[]);
  }
	
  stats vx_bubble = statsf (u_bubble.x);
  stats vy_bubble = statsf (u_bubble.y);	
  stats vz_bubble = statsf (u_bubble.z);
  	
  stats vol_bubble = statsf (c);

  FILE * fp_vb = fopen ("v.dat", "a");
  fprintf(fp_vb,"%d %f %g %g %g\n",i,t,vx_bubble.sum/vol_bubble.sum,vy_bubble.sum/vol_bubble.sum,vz_bubble.sum/vol_bubble.sum);
  fclose(fp_vb);
  
  char *outfile1 = NULL;
  outfile1 = (char *) malloc(sizeof(char) * 1024);
  sprintf(outfile1, "c-%g.png", t*1e3);  
  FILE * fp_c = fopen (outfile1, "w");
  output_ppm(c, fp_c, linear=true);
  fclose(fp_c);
}


/**
## End

The end event defines the final iteration of the computation. We can set an end time or an end iteration.
*/

event end(t = 0.06) {
}

/**
# rising.c
*/
 
#include "navier-stokes/centered.h"
#include "vof.h"
#include "tension.h"

# define R 1e-3 
# define L (30.0*R)

# define mu1 1.8e-5
# define mu2 1e-3
# define rho1 1.225
# define rho2 1e3


# define x_min (3*R)

# define LEVEL 6

scalar c[];
scalar *interfaces = {c};
scalar rhov[];
face vector alphav[];
face vector muv[];

u.n[top]    = dirichlet(0); 
u.t[top]    = neumann(0); 
u.n[back] = dirichlet(0); 
u.t[back] = neumann(0); 
u.n[front]    = dirichlet(0); 
u.t[front]    = neumann(0); 
u.n[bottom] = dirichlet(0); 
u.t[bottom] = neumann(0); 
u.n[right] = neumann(0); 
u.t[right] = dirichlet(0); 
u.n[left] = neumann(0); 
u.t[left] = dirichlet(0); 

int main() 
{
  origin ( -x_min, -L/2, -L/2);
  L0 = L;
  
  TOLERANCE = 1e-6;
  alpha = alphav;
  rho = rhov;
  mu = muv;
  c.sigma = 0.07;
  init_grid (1 << LEVEL);
  run();
}

event init_interface (i = 0) 
{  
    vertex scalar phi[];
    foreach_vertex()
      phi[] = sq(R) - sq(x) - sq(y) - sq(z);
    fractions (phi, c);
}

#define rho(c) (rho1*c + (1. - (c))*rho2)
#define mu(c)  (mu1*c + (1. - (c))*mu2)

event properties (i++) 
{
  foreach_face() 
  {
    double cm = (c[] + c[-1])/2.;
    alphav.x[] = fm.x[]/rho(cm);
    muv.x[] = (fm.x[]*mu(cm));
  }
  foreach(){
    rhov[] = cm[]*rho(c[]);
  }
}

event vof (i++, first);

event acceleration (i++) {
  face vector av = a;
  foreach_face(x)
    av.x[] -= 9.81;
}

face vector u_bubble[];
event output_velocity(t+=0.002){
  
  foreach_face() {
    u_bubble.x[] = (c[]*u.x[]);
  }
	
  stats vx_bubble = statsf (u_bubble.x);
  stats vy_bubble = statsf (u_bubble.y);	
  stats vz_bubble = statsf (u_bubble.z);
  	
  stats vol_bubble = statsf (c);

  FILE * fp_vb = fopen ("v.dat", "a");
  fprintf(fp_vb,"%d %f %g %g %g\n",i,t,vx_bubble.sum/vol_bubble.sum,vy_bubble.sum/vol_bubble.sum,vz_bubble.sum/vol_bubble.sum);
  fclose(fp_vb);
  
  char *outfile1 = NULL;
  outfile1 = (char *) malloc(sizeof(char) * 1024);
  sprintf(outfile1, "c-%g.png", t*1e3);  
  FILE * fp_c = fopen (outfile1, "w");
  output_ppm(c, fp_c, linear=true);
  fclose(fp_c);
}


event end(t = 0.06) {
}