/**
# migration.c

To take the temperature into account, only the migration.c has to be changed, the tension_var.h is the same. You can either choose the implementation of the normal at the interface with the [Height function in 2D](http://basilisk.fr/sandbox/amansur/Marangoni_effect/Ma_Chen_Bothe_2011/2D_height#tension_var.h) or with the [Mixed-Young-Centered function in 2D](http://basilisk.fr/sandbox/amansur/Marangoni_effect/Ma_Chen_Bothe_2011/2D_mixed#tension_var.h).

Or add the temperature part in the [3D simulation](http://basilisk.fr/sandbox/amansur/Marangoni_effect/Ma_Chen_Bothe_2011/3D_mixed)


By including the "tracer.h" and "diffusion.h" header files, we specify to the solver, that the 
simulation takes the temperature into account.

To get more informations about the temperature handeling, please go to [Advection_diffusion](http://basilisk.fr/sandbox/amansur/Advection_diffusion/temperature)

*/

/**
## Files inclusion

We solve the incompressible, variable-density, Navier-Stokes equations with interfaces and a variable surface tension.
*/


#include "navier-stokes/centered.h"
#include "vof.h"
#include "tracer.h"
#include "diffusion.h"
#include "tension_var.h"

/**
## Definition of macros

*Macro definitions allow constant values to be declared for use throughout your code.  
Macro definitions are not variables and cannot be changed by your program code like variables. You generally use this syntax when creating constants that represent numbers, strings or expressions.*

- The equation is non-dimensionalized (*c.f.* [Non_dimensionalization](http://basilisk.fr/sandbox/amansur/Marangoni_effect/Non_dimensionalization)) with the radius of the droplet.  

- We define a viscosity and density for both of the fluids **mu** and **rho**.  

- The **LEVEL** of mesh refinement is set at 6.
*/

# define R (1.44e-3)
# define L (4*R)
// 1 droplet, 2 continuous phase
# define mu1 (0.012)
# define mu2 (0.024)
# define rho1 (250)
# define rho2 (500)
# define sigma_T (-2e-3)
# define sigma_0 (1e-2)
# define grad_T (200)
# define x_min (0*R)

# define LEVEL 6


/**
## Definition of fields

The interface between the two-phases will be tracked with the [volume fraction](http://basilisk.fr/src/fractions.h#volume-fractions) field *c*.  
We allocate the fields for the variable density and viscosity (*alphav, rhov* and *muv* respectively).  

Notice that *alphav* is a [face vector](http://basilisk.fr/Basilisk%20C#face-and-vertex-fields) which is the flux of 1/*rhov*.
*/



scalar T[];
scalar * tracers = {T};
scalar c[];
scalar *interfaces = {c};
scalar sigma[];
scalar rhov[];
face vector alphav[];
face vector muv[];
face vector Dv[];

mgstats mgd;


/**
## Boundary conditions
*/

T[top]   = neumann(0);
T[bottom]= neumann(0);
T[right] = neumann(0);
T[left]  = neumann(0);

u.n[top]    = dirichlet(0);
u.t[top]    = neumann(0);
u.n[bottom] = dirichlet(0);
u.t[bottom] = neumann(0);
u.n[right]  = neumann(0);
u.t[right]  = dirichlet(0);
u.n[left]   = neumann(0);
u.t[left]   = dirichlet(0);


/**
## Main

The density and viscosity are defined by the variable fields we allocated above. The surface tension at the interface of both fluids in set at 0.07.

By default the domain on which the equations are solved is a square box with reflective boundaries (i.e. symmetry conditions on scalar, vector and tensor fields). The origin of the coordinate system is the lower-left corner of the box and the box length is one. We can change this using the **origin()** and **size()** (or **L0 = ..**) functions.

The **TOLERANCE** of the Poisson and viscous solvers is set to 1e-6.

**init_grid** sets the spatial discretization of the simulation.
The *<<* operator in C is a bit-shifting operation. All we
need to know here is that *1 << LEVEL* is identical to $2^{LEVEL}$. If
we want to change the resolution of the simulation, all we need to do
now is change the single value at the top of the file.

The **run()** function launch the simulation by executing the event with a time step defined in the [tension.h](http://basilisk.fr/src/tension.h#stability-condition) file (oscillation period of the smallest capillary wave).
*/


int main() 
{
  origin (x_min, -L/2);
  L0 = L;
  TOLERANCE = 1e-6;
  
  c.sigma = sigma;
  alpha = alphav;
  rho = rhov;
  mu = muv;
  init_grid (1 << LEVEL);

  run();
}


/**
## Interface definition

First we define the interface with a level-set method. Then we use the [fractions()](http://basilisk.fr/src/fractions.h#computing-volume-fractions-from-a-levelset-function) function, which computes a volume fractions field out of a levelset function.

Here, we define a cercle (in 2D) of radius R.
*/


event init_interface (i = 0) 
{  
    vertex scalar phi[];
    foreach_vertex()
      phi[] = sq(R) - sq(x) - sq(y);
    fractions (phi, c);
}

/**
## Surface tension definition

The surface tension can be defined all over the domain, but will only be used at the interface of the bubble/droplet.

*/

event init_T (i = 0) {
  foreach() {
	  T[] = ( T_0 + (x-x_min)*grad_T );
  }

  for (scalar c in interfaces){
	  foreach(){
		if ( c[] > 1e-6  ){ 	  
    	  T[] = T_bubble;
	    }
      }
   }

  boundary ({T});
}

event sigma_field (i++) {
  foreach() {
      sigma[] = ( ( sigma_T * (T[] - T_0) ) + sigma_0 ); 
  }
  boundary ({c});  
}

/**
## Properties

The density and viscosity are defined using the [VOF method](http://basilisk.fr/src/vof.h).

**cm** is the value of the volume fraction at the x face.  
*Note that a face is defined by convention as separating a cell from its **left** neighbour (see the [Face and vertex fields section](http://basilisk.fr/Basilisk%20C#face-and-vertex-fields)).*
*/

#define rho(c,T) ( (rho1(T)*c) + ( (1. - (c))*(rho2(T)) ) )
#define mu(c,T)  ( (mu1(T)*c) + ((1. - (c))*mu2(T)) )

event properties (i++) 
{
  foreach_face() 
  {
    double cm = ((c[] + c[-1])/2.);
    alphav.x[] = (fm.x[]/rho(cm,1));
    muv.x[] = (fm.x[]*mu(cm,T[]));
  }
  foreach(){
    rhov[] = (cm[]*rho(c[],T[]));
  }
}


/**
## Tracers

By default tracers are defined at tâˆ’$\Delta$t/2. We use the first keyword to move VOF advection before the logfile output i.e. at t+$\Delta$/2. This improves the results.
*/

event vof (i++, first);

#define D(c,T)  (Dv1(T)*c + (1. - (c))*Dv2(T))
// Time integration
event integration (i++) {

  foreach_face(){
	 Dv.x[] = D(c[],T[]); 
  }
  
  mgd = diffusion (T, dtmax, Dv);
}	
	

/**
## Outputs

The bubble's velocity is the sommation of the velocity field in the bubble. The volume fraction *c* being defined as 1 inside the bubble and 0 outside, the velocity field of the bubble is therefore c[ ]*u.x[ ].  
The function [statsf](http://basilisk.fr/src/utils.h#134) makes the volumic sommation of a field.  
We then get the mean velocity of the bubble, that we store in a file named *v_bubble.dat*.  

To observe the evolution of the bubble, we also output the pictures of the volume fraction.
*/	
	
face vector u_bubble[];
event velocity(i++){
  
	foreach() {
	  u_bubble.x[] = (c[]*u.x[]);
	  u_bubble.y[] = (c[]*u.y[]); 
	}
	
	stats vx_bubble = statsf (u_bubble.x);
	stats vy_bubble = statsf (u_bubble.y);	
	stats vol_bubble = statsf (c);

  FILE * fp_vb = fopen ("v.dat", "a");
  fprintf(fp_vb,"%d %f %g %g\n",i,t,vx_bubble.sum/vol_bubble.sum,vy_bubble.sum/vol_bubble.sum);
  fclose(fp_vb);
  
}  
  
  
event output_T(i++){

  char *outfile2 = NULL;
  outfile2 = (char *) malloc(sizeof(char) * 256);
  sprintf(outfile2, "T-%d.png", i);
  FILE * fp_T = fopen (outfile2, "w");
  output_ppm(T,fp_T, linear=true);   
  fclose(fp_T);
  
  
  FILE * fp_t = fopen ("t.dat", "a");
  fprintf(fp_t,"%d %g \n",i,t);
  fclose(fp_t);
} 


/**
## End

The end event defines the final iteration of the computation. We can set an end time or an end iteration.
*/

event end(i=10) {
}